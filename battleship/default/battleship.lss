
battleship.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00002128  000021bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800232  00800232  000022ee  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000022ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004b8  00000000  00000000  000024ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cd6  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001593  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f09  00000000  00000000  00006bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00008af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000609  00000000  00000000  00008f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000158b  00000000  00000000  00009521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000aaac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__vector_1>
       8:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_2>
       c:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_3>
      10:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_4>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e2       	ldi	r30, 0x28	; 40
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 33       	cpi	r26, 0x32	; 50
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 e3       	ldi	r26, 0x32	; 50
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 33       	cpi	r26, 0x38	; 56
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
      c6:	0c 94 92 10 	jmp	0x2124	; 0x2124 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay>:
//
// Delay function
//
//-------------------------------------------------------------------------------------------------
void delay(void)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char i;
	for (i = 0; i < (F_CPU / 1000000); i++)
      d8:	19 82       	std	Y+1, r1	; 0x01
      da:	04 c0       	rjmp	.+8      	; 0xe4 <delay+0x16>
	{
		asm("nop");
      dc:	00 00       	nop
//
//-------------------------------------------------------------------------------------------------
void delay(void)
{
	volatile unsigned char i;
	for (i = 0; i < (F_CPU / 1000000); i++)
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	8f 5f       	subi	r24, 0xFF	; 255
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	80 31       	cpi	r24, 0x10	; 16
      e8:	c8 f3       	brcs	.-14     	; 0xdc <delay+0xe>
	{
		asm("nop");
	}
}
      ea:	0f 90       	pop	r0
      ec:	cf 91       	pop	r28
      ee:	df 91       	pop	r29
      f0:	08 95       	ret

000000f2 <GLCD_InitializeInterface>:
// Ports intalization
//
//-------------------------------------------------------------------------------------------------
void GLCD_InitializeInterface(void)
{
	GLCD_DATA_DDR = 0xFF;
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	8a bb       	out	0x1a, r24	; 26
	GLCD_CTRL_DDR = ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
      f6:	8f e3       	ldi	r24, 0x3F	; 63
      f8:	84 bb       	out	0x14, r24	; 20
	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
      fa:	85 b3       	in	r24, 0x15	; 21
      fc:	8f 63       	ori	r24, 0x3F	; 63
      fe:	85 bb       	out	0x15, r24	; 21
}
     100:	08 95       	ret

00000102 <GLCD_CheckStatus>:
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_CheckStatus(void)
{
	uint8_t tmp;
	GLCD_DATA_DDR = 0x00;
     102:	1a ba       	out	0x1a, r1	; 26

	GLCD_CTRL_PORT &= ~((1 << GLCD_RD) | (1 << GLCD_CE));
     104:	85 b3       	in	r24, 0x15	; 21
     106:	89 7f       	andi	r24, 0xF9	; 249
     108:	85 bb       	out	0x15, r24	; 21
	delay();
     10a:	0e 94 67 00 	call	0xce	; 0xce <delay>
	tmp = GLCD_DATA_PIN;
     10e:	89 b3       	in	r24, 0x19	; 25
	GLCD_DATA_DDR = 0xFF;
     110:	9f ef       	ldi	r25, 0xFF	; 255
     112:	9a bb       	out	0x1a, r25	; 26
	GLCD_CTRL_PORT |= ((1 << GLCD_RD) | (1 << GLCD_CE));
     114:	95 b3       	in	r25, 0x15	; 21
     116:	96 60       	ori	r25, 0x06	; 6
     118:	95 bb       	out	0x15, r25	; 21
	return tmp;
}
     11a:	08 95       	ret

0000011c <GLCD_WriteCommand>:
//
// Writes instruction
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(unsigned char command)
{
     11c:	1f 93       	push	r17
     11e:	18 2f       	mov	r17, r24
	while (!(GLCD_CheckStatus() & 0x03));
     120:	0e 94 81 00 	call	0x102	; 0x102 <GLCD_CheckStatus>
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	83 70       	andi	r24, 0x03	; 3
     128:	90 70       	andi	r25, 0x00	; 0
     12a:	89 2b       	or	r24, r25
     12c:	c9 f3       	breq	.-14     	; 0x120 <GLCD_WriteCommand+0x4>
	GLCD_DATA_PORT = command;
     12e:	1b bb       	out	0x1b, r17	; 27

	GLCD_CTRL_PORT &= ~((1 << GLCD_WR) | (1 << GLCD_CE));
     130:	85 b3       	in	r24, 0x15	; 21
     132:	8a 7f       	andi	r24, 0xFA	; 250
     134:	85 bb       	out	0x15, r24	; 21
	delay();
     136:	0e 94 67 00 	call	0xce	; 0xce <delay>
	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_CE));
     13a:	85 b3       	in	r24, 0x15	; 21
     13c:	85 60       	ori	r24, 0x05	; 5
     13e:	85 bb       	out	0x15, r24	; 21
}
     140:	1f 91       	pop	r17
     142:	08 95       	ret

00000144 <GLCD_WriteData>:
//
// Writes data
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteData(unsigned char data)
{
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
	while (!(GLCD_CheckStatus() & 0x03));
     148:	0e 94 81 00 	call	0x102	; 0x102 <GLCD_CheckStatus>
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	83 70       	andi	r24, 0x03	; 3
     150:	90 70       	andi	r25, 0x00	; 0
     152:	89 2b       	or	r24, r25
     154:	c9 f3       	breq	.-14     	; 0x148 <GLCD_WriteData+0x4>
	GLCD_DATA_PORT = data;
     156:	1b bb       	out	0x1b, r17	; 27

	GLCD_CTRL_PORT &= ~((1 << GLCD_WR) | (1 << GLCD_CE) | (1 << GLCD_CD));
     158:	85 b3       	in	r24, 0x15	; 21
     15a:	82 7f       	andi	r24, 0xF2	; 242
     15c:	85 bb       	out	0x15, r24	; 21
	delay();
     15e:	0e 94 67 00 	call	0xce	; 0xce <delay>
	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_CE) | (1 << GLCD_CD));
     162:	85 b3       	in	r24, 0x15	; 21
     164:	8d 60       	ori	r24, 0x0D	; 13
     166:	85 bb       	out	0x15, r24	; 21
}
     168:	1f 91       	pop	r17
     16a:	08 95       	ret

0000016c <GLCD_ReadData>:
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadData(void)
{
	uint8_t tmp;
	while (!(GLCD_CheckStatus() & 0x03));
     16c:	0e 94 81 00 	call	0x102	; 0x102 <GLCD_CheckStatus>
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	83 70       	andi	r24, 0x03	; 3
     174:	90 70       	andi	r25, 0x00	; 0
     176:	89 2b       	or	r24, r25
     178:	c9 f3       	breq	.-14     	; 0x16c <GLCD_ReadData>
	GLCD_DATA_DDR = 0x00;
     17a:	1a ba       	out	0x1a, r1	; 26

	GLCD_CTRL_PORT &= ~((1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD));
     17c:	85 b3       	in	r24, 0x15	; 21
     17e:	81 7f       	andi	r24, 0xF1	; 241
     180:	85 bb       	out	0x15, r24	; 21
	delay();
     182:	0e 94 67 00 	call	0xce	; 0xce <delay>
	tmp = GLCD_DATA_PIN;
     186:	89 b3       	in	r24, 0x19	; 25
	GLCD_CTRL_PORT |= ((1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD));
     188:	95 b3       	in	r25, 0x15	; 21
     18a:	9e 60       	ori	r25, 0x0E	; 14
     18c:	95 bb       	out	0x15, r25	; 21
	GLCD_DATA_DDR = 0xFF;
     18e:	9f ef       	ldi	r25, 0xFF	; 255
     190:	9a bb       	out	0x1a, r25	; 26
	return tmp;
}
     192:	08 95       	ret

00000194 <GLCD_SetAddressPointer>:
//
// Sets address pointer for display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_SetAddressPointer(unsigned int address)
{
     194:	1f 93       	push	r17
     196:	19 2f       	mov	r17, r25
	GLCD_WriteData(address & 0xFF);
     198:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(address >> 8);
     19c:	81 2f       	mov	r24, r17
     19e:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_ADDRESS_POINTER);
     1a2:	84 e2       	ldi	r24, 0x24	; 36
     1a4:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>
}
     1a8:	1f 91       	pop	r17
     1aa:	08 95       	ret

000001ac <GLCD_TextGoTo>:
{
	unsigned int address;

	address = GLCD_TEXT_HOME + x + (GLCD_TEXT_AREA * y);

	GLCD_SetAddressPointer(address);
     1ac:	9e e1       	ldi	r25, 0x1E	; 30
     1ae:	69 9f       	mul	r22, r25
     1b0:	b0 01       	movw	r22, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	9b 01       	movw	r18, r22
     1b6:	28 0f       	add	r18, r24
     1b8:	31 1d       	adc	r19, r1
     1ba:	c9 01       	movw	r24, r18
     1bc:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
}
     1c0:	08 95       	ret

000001c2 <GLCD_WriteDisplayData>:
// Writes display data and increment address pointer
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteDisplayData(unsigned char x)
{
	GLCD_WriteData(x);
     1c2:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_DATA_WRITE_AND_INCREMENT);
     1c6:	80 ec       	ldi	r24, 0xC0	; 192
     1c8:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>
}
     1cc:	08 95       	ret

000001ce <GLCD_SetPixel>:
//
// Set (if color==1) or clear (if color==0) pixel on screen
//
//-------------------------------------------------------------------------------------------------
void GLCD_SetPixel(unsigned char x, unsigned char y, unsigned char color)
{
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	18 2f       	mov	r17, r24
     1d4:	04 2f       	mov	r16, r20
	unsigned char tmp;
	unsigned int address;

	address = GLCD_GRAPHIC_HOME + (x / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);

	GLCD_SetAddressPointer(address);
     1d6:	86 95       	lsr	r24
     1d8:	86 95       	lsr	r24
     1da:	86 95       	lsr	r24
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	80 52       	subi	r24, 0x20	; 32
     1e0:	9e 4f       	sbci	r25, 0xFE	; 254
     1e2:	2e e1       	ldi	r18, 0x1E	; 30
     1e4:	62 9f       	mul	r22, r18
     1e6:	b0 01       	movw	r22, r0
     1e8:	11 24       	eor	r1, r1
     1ea:	86 0f       	add	r24, r22
     1ec:	97 1f       	adc	r25, r23
     1ee:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>

	GLCD_WriteCommand(T6963_DATA_READ_AND_NONVARIABLE);
     1f2:	85 ec       	ldi	r24, 0xC5	; 197
     1f4:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>
	tmp = GLCD_ReadData();
     1f8:	0e 94 b6 00 	call	0x16c	; 0x16c <GLCD_ReadData>
     1fc:	48 2f       	mov	r20, r24
     1fe:	21 2f       	mov	r18, r17
     200:	30 e0       	ldi	r19, 0x00	; 0

	if (color)
     202:	00 23       	and	r16, r16
     204:	69 f0       	breq	.+26     	; 0x220 <GLCD_SetPixel+0x52>
		tmp |= (1 << (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
     206:	20 95       	com	r18
     208:	30 95       	com	r19
     20a:	27 70       	andi	r18, 0x07	; 7
     20c:	30 70       	andi	r19, 0x00	; 0
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <GLCD_SetPixel+0x4a>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	2a 95       	dec	r18
     21a:	e2 f7       	brpl	.-8      	; 0x214 <GLCD_SetPixel+0x46>
     21c:	84 2b       	or	r24, r20
     21e:	0d c0       	rjmp	.+26     	; 0x23a <GLCD_SetPixel+0x6c>
	else
		tmp &= ~(1 << (GLCD_FONT_WIDTH - 1 - (x % GLCD_FONT_WIDTH)));
     220:	20 95       	com	r18
     222:	30 95       	com	r19
     224:	27 70       	andi	r18, 0x07	; 7
     226:	30 70       	andi	r19, 0x00	; 0
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	02 c0       	rjmp	.+4      	; 0x232 <GLCD_SetPixel+0x64>
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	2a 95       	dec	r18
     234:	e2 f7       	brpl	.-8      	; 0x22e <GLCD_SetPixel+0x60>
     236:	80 95       	com	r24
     238:	84 23       	and	r24, r20

	GLCD_WriteDisplayData(tmp);
     23a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>

}
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	08 95       	ret

00000244 <GLCD_DefineCharacter>:
//
// Writes single char pattern to character generator area of display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_DefineCharacter(unsigned char charCode, unsigned char * defChar)
{
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	8b 01       	movw	r16, r22
	unsigned int address;
	unsigned char i;

	address = GLCD_EXTERNAL_CG_HOME + (8 * charCode);

	GLCD_SetAddressPointer(address);
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	80 50       	subi	r24, 0x00	; 0
     252:	9e 4f       	sbci	r25, 0xFE	; 254
     254:	23 e0       	ldi	r18, 0x03	; 3
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	2a 95       	dec	r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <GLCD_DefineCharacter+0x12>
     25e:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
     262:	c0 e0       	ldi	r28, 0x00	; 0
     264:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)
	{
		GLCD_WriteDisplayData(*(defChar + i));
     266:	f8 01       	movw	r30, r16
     268:	ec 0f       	add	r30, r28
     26a:	fd 1f       	adc	r31, r29
     26c:	80 81       	ld	r24, Z
     26e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>
     272:	21 96       	adiw	r28, 0x01	; 1

	address = GLCD_EXTERNAL_CG_HOME + (8 * charCode);

	GLCD_SetAddressPointer(address);

	for (i = 0; i < 8; i++)
     274:	c8 30       	cpi	r28, 0x08	; 8
     276:	d1 05       	cpc	r29, r1
     278:	b1 f7       	brne	.-20     	; 0x266 <GLCD_DefineCharacter+0x22>
	{
		GLCD_WriteDisplayData(*(defChar + i));
	}
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <GLCD_WriteChar>:
// Writes a single character (ASCII code) to display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charCode)
{
	GLCD_WriteDisplayData(charCode - 32);
     284:	80 52       	subi	r24, 0x20	; 32
     286:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>
}
     28a:	08 95       	ret

0000028c <GLCD_WriteString>:
//
// Writes null-terminated string to display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * string)
{
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	ec 01       	movw	r28, r24
     292:	03 c0       	rjmp	.+6      	; 0x29a <GLCD_WriteString+0xe>
	while (*string)
	{
		GLCD_WriteChar(*string++);
     294:	21 96       	adiw	r28, 0x01	; 1
     296:	0e 94 42 01 	call	0x284	; 0x284 <GLCD_WriteChar>
// Writes null-terminated string to display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * string)
{
	while (*string)
     29a:	88 81       	ld	r24, Y
     29c:	88 23       	and	r24, r24
     29e:	d1 f7       	brne	.-12     	; 0x294 <GLCD_WriteString+0x8>
	{
		GLCD_WriteChar(*string++);
	}
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <GLCD_ClearGraphic>:
//
// Clears graphics area of display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearGraphic(void)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
	int i;
	GLCD_SetAddressPointer(GLCD_GRAPHIC_HOME);
     2aa:	80 ee       	ldi	r24, 0xE0	; 224
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
     2b2:	c0 e0       	ldi	r28, 0x00	; 0
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < GLCD_GRAPHIC_SIZE; i++)
	{
		GLCD_WriteDisplayData(0x00);
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>
//-------------------------------------------------------------------------------------------------
void GLCD_ClearGraphic(void)
{
	int i;
	GLCD_SetAddressPointer(GLCD_GRAPHIC_HOME);
	for (i = 0; i < GLCD_GRAPHIC_SIZE; i++)
     2bc:	21 96       	adiw	r28, 0x01	; 1
     2be:	8f e0       	ldi	r24, 0x0F	; 15
     2c0:	c0 30       	cpi	r28, 0x00	; 0
     2c2:	d8 07       	cpc	r29, r24
     2c4:	c1 f7       	brne	.-16     	; 0x2b6 <GLCD_ClearGraphic+0x10>
	{
		GLCD_WriteDisplayData(0x00);
	}
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <GLCD_ClearCG>:
//
// Clears characters generator area of display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearCG(void)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	unsigned int i;
	GLCD_SetAddressPointer(GLCD_EXTERNAL_CG_HOME);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e1       	ldi	r25, 0x10	; 16
     2d4:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
     2d8:	c0 e0       	ldi	r28, 0x00	; 0
     2da:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 256 * 8; i++)
	{
		GLCD_WriteDisplayData(0);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>
void GLCD_ClearCG(void)
{
	unsigned int i;
	GLCD_SetAddressPointer(GLCD_EXTERNAL_CG_HOME);

	for (i = 0; i < 256 * 8; i++)
     2e2:	21 96       	adiw	r28, 0x01	; 1
     2e4:	88 e0       	ldi	r24, 0x08	; 8
     2e6:	c0 30       	cpi	r28, 0x00	; 0
     2e8:	d8 07       	cpc	r29, r24
     2ea:	c1 f7       	brne	.-16     	; 0x2dc <GLCD_ClearCG+0x10>
	{
		GLCD_WriteDisplayData(0);
	}
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <GLCD_ClearText>:
//
// Clears text area of display RAM memory
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearText(void)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
	int i;
	GLCD_SetAddressPointer(GLCD_TEXT_HOME);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < GLCD_TEXT_SIZE; i++)
	{
		GLCD_WriteDisplayData(0);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <GLCD_WriteDisplayData>
void GLCD_ClearText(void)
{
	int i;
	GLCD_SetAddressPointer(GLCD_TEXT_HOME);

	for (i = 0; i < GLCD_TEXT_SIZE; i++)
     308:	21 96       	adiw	r28, 0x01	; 1
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	c0 3e       	cpi	r28, 0xE0	; 224
     30e:	d8 07       	cpc	r29, r24
     310:	c1 f7       	brne	.-16     	; 0x302 <GLCD_ClearText+0x10>
	{
		GLCD_WriteDisplayData(0);
	}
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <GLCD_GraphicGoTo>:
//-------------------------------------------------------------------------------------------------
void GLCD_GraphicGoTo(unsigned char x, unsigned char y)
{
	unsigned int address;
	address = GLCD_GRAPHIC_HOME + (x / GLCD_FONT_WIDTH) + (GLCD_GRAPHIC_AREA * y);
	GLCD_SetAddressPointer(address);
     318:	86 95       	lsr	r24
     31a:	86 95       	lsr	r24
     31c:	86 95       	lsr	r24
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	80 52       	subi	r24, 0x20	; 32
     322:	9e 4f       	sbci	r25, 0xFE	; 254
     324:	2e e1       	ldi	r18, 0x1E	; 30
     326:	62 9f       	mul	r22, r18
     328:	b0 01       	movw	r22, r0
     32a:	11 24       	eor	r1, r1
     32c:	86 0f       	add	r24, r22
     32e:	97 1f       	adc	r25, r23
     330:	0e 94 ca 00 	call	0x194	; 0x194 <GLCD_SetAddressPointer>
}
     334:	08 95       	ret

00000336 <GLCD_Initialize>:
// Ports intalization
//
//-------------------------------------------------------------------------------------------------
void GLCD_InitializeInterface(void)
{
	GLCD_DATA_DDR = 0xFF;
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	8a bb       	out	0x1a, r24	; 26
	GLCD_CTRL_DDR = ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
     33a:	8f e3       	ldi	r24, 0x3F	; 63
     33c:	84 bb       	out	0x14, r24	; 20
	GLCD_CTRL_PORT |= ((1 << GLCD_WR) | (1 << GLCD_RD) | (1 << GLCD_CE) | (1 << GLCD_CD) | (1 << GLCD_RESET) | (1 << GLCD_FS));
     33e:	85 b3       	in	r24, 0x15	; 21
     340:	8f 63       	ori	r24, 0x3F	; 63
     342:	85 bb       	out	0x15, r24	; 21
//-------------------------------------------------------------------------------------------------
void GLCD_Initialize(void)
{
	GLCD_InitializeInterface();

	GLCD_CTRL_PORT &= ~(1 << GLCD_RESET);
     344:	ac 98       	cbi	0x15, 4	; 21
	delay_ms(1);
	GLCD_CTRL_PORT |= (1 << GLCD_RESET);
     346:	ac 9a       	sbi	0x15, 4	; 21

#if (GLCD_FONT_WIDTH == 8)
	GLCD_CTRL_PORT &= ~(1 << GLCD_FS);
     348:	ad 98       	cbi	0x15, 5	; 21
#endif

	GLCD_WriteData(GLCD_GRAPHIC_HOME & 0xFF);
     34a:	80 ee       	ldi	r24, 0xE0	; 224
     34c:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(GLCD_GRAPHIC_HOME >> 8);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_GRAPHIC_HOME_ADDRESS);
     356:	82 e4       	ldi	r24, 0x42	; 66
     358:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteData(GLCD_GRAPHIC_AREA);
     35c:	8e e1       	ldi	r24, 0x1E	; 30
     35e:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(0x00);
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_GRAPHIC_AREA);
     368:	83 e4       	ldi	r24, 0x43	; 67
     36a:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteData(GLCD_TEXT_HOME);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(GLCD_TEXT_HOME >> 8);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_TEXT_HOME_ADDRESS);
     37a:	80 e4       	ldi	r24, 0x40	; 64
     37c:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteData(GLCD_TEXT_AREA);
     380:	8e e1       	ldi	r24, 0x1E	; 30
     382:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(0x00);
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_TEXT_AREA);
     38c:	81 e4       	ldi	r24, 0x41	; 65
     38e:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteData(GLCD_OFFSET_REGISTER);
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteData(0x00);
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 a2 00 	call	0x144	; 0x144 <GLCD_WriteData>
	GLCD_WriteCommand(T6963_SET_OFFSET_REGISTER);
     39e:	82 e2       	ldi	r24, 0x22	; 34
     3a0:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteCommand(T6963_DISPLAY_MODE | T6963_GRAPHIC_DISPLAY_ON | T6963_TEXT_DISPLAY_ON /*| T6963_CURSOR_DISPLAY_ON*/);
     3a4:	8c e9       	ldi	r24, 0x9C	; 156
     3a6:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

	GLCD_WriteCommand(T6963_MODE_SET | 0);
     3aa:	80 e8       	ldi	r24, 0x80	; 128
     3ac:	0e 94 8e 00 	call	0x11c	; 0x11c <GLCD_WriteCommand>

}
     3b0:	08 95       	ret

000003b2 <delay_ms>:
{
	int i, j;

	for (i = 0; i<ms; i++)
		for (j = 0; j<2100; j++);
}
     3b2:	08 95       	ret

000003b4 <GLCD_Clear>:

void GLCD_Clear(void)
{
	GLCD_ClearCG();
     3b4:	0e 94 66 01 	call	0x2cc	; 0x2cc <GLCD_ClearCG>
	GLCD_ClearGraphic();
     3b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <GLCD_ClearGraphic>
	GLCD_ClearText();
     3bc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <GLCD_ClearText>
}
     3c0:	08 95       	ret

000003c2 <GLCD_Rectangle>:

const unsigned char color = 1;


void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	f8 2e       	mov	r15, r24
     3d2:	06 2f       	mov	r16, r22
     3d4:	b4 2e       	mov	r11, r20
     3d6:	d2 2e       	mov	r13, r18
     3d8:	ee 24       	eor	r14, r14
	unsigned char j;

	for (j = 0; j < a; j++) {
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
     3da:	fa 94       	dec	r15
     3dc:	cf 2c       	mov	r12, r15
     3de:	c4 0e       	add	r12, r20
     3e0:	f3 94       	inc	r15
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <GLCD_Rectangle+0x3c>

void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
	unsigned char j;

	for (j = 0; j < a; j++) {
     3e4:	1e 2d       	mov	r17, r14
     3e6:	10 0f       	add	r17, r16
		GLCD_SetPixel(x, y + j, color);
     3e8:	8f 2d       	mov	r24, r15
     3ea:	61 2f       	mov	r22, r17
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(x + b - 1, y + j, color);
     3f2:	8c 2d       	mov	r24, r12
     3f4:	61 2f       	mov	r22, r17
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>

void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
	unsigned char j;

	for (j = 0; j < a; j++) {
     3fc:	e3 94       	inc	r14
     3fe:	ed 14       	cp	r14, r13
     400:	88 f3       	brcs	.-30     	; 0x3e4 <GLCD_Rectangle+0x22>
     402:	ee 24       	eor	r14, r14
		GLCD_SetPixel(x + b - 1, y + j, color);
	}

	for (j = 0; j < b; j++)	{
		GLCD_SetPixel(x + j, y, color);
		GLCD_SetPixel(x + j, y + a - 1, color);
     404:	01 50       	subi	r16, 0x01	; 1
     406:	d0 0e       	add	r13, r16
     408:	0f 5f       	subi	r16, 0xFF	; 255
     40a:	0d c0       	rjmp	.+26     	; 0x426 <GLCD_Rectangle+0x64>

void GLCD_Rectangle(unsigned char x, unsigned char y, unsigned char b, unsigned char a)
{
	unsigned char j;

	for (j = 0; j < a; j++) {
     40c:	1e 2d       	mov	r17, r14
     40e:	1f 0d       	add	r17, r15
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
	}

	for (j = 0; j < b; j++)	{
		GLCD_SetPixel(x + j, y, color);
     410:	81 2f       	mov	r24, r17
     412:	60 2f       	mov	r22, r16
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(x + j, y + a - 1, color);
     41a:	81 2f       	mov	r24, r17
     41c:	6d 2d       	mov	r22, r13
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
	for (j = 0; j < a; j++) {
		GLCD_SetPixel(x, y + j, color);
		GLCD_SetPixel(x + b - 1, y + j, color);
	}

	for (j = 0; j < b; j++)	{
     424:	e3 94       	inc	r14
     426:	eb 14       	cp	r14, r11
     428:	88 f3       	brcs	.-30     	; 0x40c <GLCD_Rectangle+0x4a>
		GLCD_SetPixel(x + j, y, color);
		GLCD_SetPixel(x + j, y + a - 1, color);
	}
}
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	08 95       	ret

0000043a <GLCD_Circle>:


void GLCD_Circle(unsigned char cx, unsigned char cy, unsigned char radius)
{
     43a:	3f 92       	push	r3
     43c:	4f 92       	push	r4
     43e:	5f 92       	push	r5
     440:	6f 92       	push	r6
     442:	7f 92       	push	r7
     444:	8f 92       	push	r8
     446:	9f 92       	push	r9
     448:	af 92       	push	r10
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	38 2e       	mov	r3, r24
     45e:	c6 2e       	mov	r12, r22
	int x, y, xchange, ychange, radiusError;
	x = radius;
     460:	84 2e       	mov	r8, r20
     462:	99 24       	eor	r9, r9
	y = 0;
	xchange = 1 - 2 * radius;
     464:	c4 01       	movw	r24, r8
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	cc 27       	eor	r28, r28
     46c:	dd 27       	eor	r29, r29
     46e:	c8 1b       	sub	r28, r24
     470:	d9 0b       	sbc	r29, r25
     472:	21 96       	adiw	r28, 0x01	; 1
     474:	66 24       	eor	r6, r6
     476:	77 24       	eor	r7, r7
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	44 2e       	mov	r4, r20
     47c:	51 2c       	mov	r5, r1
     47e:	aa 24       	eor	r10, r10
     480:	bb 24       	eor	r11, r11
	ychange = 1;
	radiusError = 0;
	while (x >= y)
	{
		GLCD_SetPixel(cx + x, cy + y, color);
     482:	d8 2c       	mov	r13, r8
     484:	d3 0c       	add	r13, r3
	}
}


void GLCD_Circle(unsigned char cx, unsigned char cy, unsigned char radius)
{
     486:	06 2d       	mov	r16, r6
     488:	0c 0d       	add	r16, r12
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while (x >= y)
	{
		GLCD_SetPixel(cx + x, cy + y, color);
     48a:	8d 2d       	mov	r24, r13
     48c:	60 2f       	mov	r22, r16
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(cx - x, cy + y, color);
     494:	13 2d       	mov	r17, r3
     496:	18 19       	sub	r17, r8
     498:	81 2f       	mov	r24, r17
     49a:	60 2f       	mov	r22, r16
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     4a2:	0c 2d       	mov	r16, r12
     4a4:	06 19       	sub	r16, r6
		GLCD_SetPixel(cx - x, cy - y, color);
     4a6:	81 2f       	mov	r24, r17
     4a8:	60 2f       	mov	r22, r16
     4aa:	41 e0       	ldi	r20, 0x01	; 1
     4ac:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(cx + x, cy - y, color);
     4b0:	8d 2d       	mov	r24, r13
     4b2:	60 2f       	mov	r22, r16
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     4ba:	d6 2c       	mov	r13, r6
     4bc:	d3 0c       	add	r13, r3
		GLCD_SetPixel(cx + y, cy + x, color);
     4be:	08 2d       	mov	r16, r8
     4c0:	0c 0d       	add	r16, r12
     4c2:	8d 2d       	mov	r24, r13
     4c4:	60 2f       	mov	r22, r16
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     4cc:	13 2d       	mov	r17, r3
     4ce:	16 19       	sub	r17, r6
		GLCD_SetPixel(cx - y, cy + x, color);
     4d0:	81 2f       	mov	r24, r17
     4d2:	60 2f       	mov	r22, r16
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(cx - y, cy - x, color);
     4da:	0c 2d       	mov	r16, r12
     4dc:	08 19       	sub	r16, r8
     4de:	81 2f       	mov	r24, r17
     4e0:	60 2f       	mov	r22, r16
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		GLCD_SetPixel(cx + y, cy - x, color);
     4e8:	8d 2d       	mov	r24, r13
     4ea:	60 2f       	mov	r22, r16
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
		y++;
     4f2:	08 94       	sec
     4f4:	61 1c       	adc	r6, r1
     4f6:	71 1c       	adc	r7, r1
		radiusError += ychange;
     4f8:	a4 0c       	add	r10, r4
     4fa:	b5 1c       	adc	r11, r5
		ychange += 2;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	48 0e       	add	r4, r24
     502:	59 1e       	adc	r5, r25
		if (2 * radiusError + xchange > 0)
     504:	c5 01       	movw	r24, r10
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	8c 0f       	add	r24, r28
     50c:	9d 1f       	adc	r25, r29
     50e:	18 16       	cp	r1, r24
     510:	19 06       	cpc	r1, r25
     512:	34 f4       	brge	.+12     	; 0x520 <GLCD_Circle+0xe6>
		{
			x--;
     514:	08 94       	sec
     516:	81 08       	sbc	r8, r1
     518:	91 08       	sbc	r9, r1
			radiusError += xchange;
     51a:	ac 0e       	add	r10, r28
     51c:	bd 1e       	adc	r11, r29
			xchange += 2;
     51e:	22 96       	adiw	r28, 0x02	; 2
	x = radius;
	y = 0;
	xchange = 1 - 2 * radius;
	ychange = 1;
	radiusError = 0;
	while (x >= y)
     520:	86 14       	cp	r8, r6
     522:	97 04       	cpc	r9, r7
     524:	0c f0       	brlt	.+2      	; 0x528 <GLCD_Circle+0xee>
     526:	ad cf       	rjmp	.-166    	; 0x482 <GLCD_Circle+0x48>
			x--;
			radiusError += xchange;
			xchange += 2;
		}
	}
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	bf 90       	pop	r11
     53a:	af 90       	pop	r10
     53c:	9f 90       	pop	r9
     53e:	8f 90       	pop	r8
     540:	7f 90       	pop	r7
     542:	6f 90       	pop	r6
     544:	5f 90       	pop	r5
     546:	4f 90       	pop	r4
     548:	3f 90       	pop	r3
     54a:	08 95       	ret

0000054c <GLCD_Line>:


void GLCD_Line(int X1, int Y1, int X2, int Y2)
{
     54c:	2f 92       	push	r2
     54e:	3f 92       	push	r3
     550:	4f 92       	push	r4
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	00 d0       	rcall	.+0      	; 0x572 <GLCD_Line+0x26>
     572:	00 d0       	rcall	.+0      	; 0x574 <GLCD_Line+0x28>
     574:	00 d0       	rcall	.+0      	; 0x576 <GLCD_Line+0x2a>
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	5c 01       	movw	r10, r24
     57c:	7e 83       	std	Y+6, r23	; 0x06
     57e:	6d 83       	std	Y+5, r22	; 0x05
     580:	5a 83       	std	Y+2, r21	; 0x02
     582:	49 83       	std	Y+1, r20	; 0x01
     584:	3c 83       	std	Y+4, r19	; 0x04
     586:	2b 83       	std	Y+3, r18	; 0x03
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2 - X1);
     588:	6a 01       	movw	r12, r20
     58a:	c8 1a       	sub	r12, r24
     58c:	d9 0a       	sbc	r13, r25
	Dy = (Y2 - Y1);
     58e:	79 01       	movw	r14, r18
     590:	e6 1a       	sub	r14, r22
     592:	f7 0a       	sbc	r15, r23

	TwoDx = Dx + Dx;
     594:	16 01       	movw	r2, r12
     596:	22 0c       	add	r2, r2
     598:	33 1c       	adc	r3, r3
	TwoDy = Dy + Dy;
     59a:	27 01       	movw	r4, r14
     59c:	44 0c       	add	r4, r4
     59e:	55 1c       	adc	r5, r5
	CurrentY = Y1;

	Xinc = 1;
	Yinc = 1;

	if (Dx < 0)
     5a0:	d7 fc       	sbrc	r13, 7
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <GLCD_Line+0x60>
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	67 2e       	mov	r6, r23
     5a8:	71 2c       	mov	r7, r1
     5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <GLCD_Line+0x76>
	{
		Xinc = -1;
		Dx = -Dx;
     5ac:	d0 94       	com	r13
     5ae:	c1 94       	neg	r12
     5b0:	d1 08       	sbc	r13, r1
     5b2:	d3 94       	inc	r13
		TwoDx = -TwoDx;
     5b4:	30 94       	com	r3
     5b6:	21 94       	neg	r2
     5b8:	31 08       	sbc	r3, r1
     5ba:	33 94       	inc	r3
     5bc:	66 24       	eor	r6, r6
     5be:	6a 94       	dec	r6
     5c0:	76 2c       	mov	r7, r6
	}

	if (Dy < 0)
     5c2:	f7 fc       	sbrc	r15, 7
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <GLCD_Line+0x82>
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	86 2e       	mov	r8, r22
     5ca:	91 2c       	mov	r9, r1
     5cc:	0b c0       	rjmp	.+22     	; 0x5e4 <GLCD_Line+0x98>
	{
		Yinc = -1;
		Dy = -Dy;
     5ce:	f0 94       	com	r15
     5d0:	e1 94       	neg	r14
     5d2:	f1 08       	sbc	r15, r1
     5d4:	f3 94       	inc	r15
		TwoDy = -TwoDy;
     5d6:	50 94       	com	r5
     5d8:	41 94       	neg	r4
     5da:	51 08       	sbc	r5, r1
     5dc:	53 94       	inc	r5
     5de:	88 24       	eor	r8, r8
     5e0:	8a 94       	dec	r8
     5e2:	98 2c       	mov	r9, r8
	}

	GLCD_SetPixel(X1, Y1, color);
     5e4:	8a 2d       	mov	r24, r10
     5e6:	6d 81       	ldd	r22, Y+5	; 0x05
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>

	if ((Dx != 0) || (Dy != 0))
     5ee:	c1 14       	cp	r12, r1
     5f0:	d1 04       	cpc	r13, r1
     5f2:	21 f4       	brne	.+8      	; 0x5fc <GLCD_Line+0xb0>
     5f4:	e1 14       	cp	r14, r1
     5f6:	f1 04       	cpc	r15, r1
     5f8:	09 f4       	brne	.+2      	; 0x5fc <GLCD_Line+0xb0>
     5fa:	42 c0       	rjmp	.+132    	; 0x680 <GLCD_Line+0x134>
	{

		if (Dy <= Dx)
     5fc:	ce 14       	cp	r12, r14
     5fe:	df 04       	cpc	r13, r15
     600:	04 f1       	brlt	.+64     	; 0x642 <GLCD_Line+0xf6>
     602:	83 01       	movw	r16, r6
     604:	0a 0d       	add	r16, r10
     606:	1b 1d       	adc	r17, r11
     608:	ed 80       	ldd	r14, Y+5	; 0x05
     60a:	fe 80       	ldd	r15, Y+6	; 0x06
     60c:	aa 24       	eor	r10, r10
     60e:	bb 24       	eor	r11, r11
		{
			TwoDxAccumulatedError = 0;
			do
			{
				CurrentX += Xinc;
				TwoDxAccumulatedError += TwoDy;
     610:	a4 0c       	add	r10, r4
     612:	b5 1c       	adc	r11, r5
				if (TwoDxAccumulatedError > Dx)
     614:	ca 14       	cp	r12, r10
     616:	db 04       	cpc	r13, r11
     618:	24 f4       	brge	.+8      	; 0x622 <GLCD_Line+0xd6>
				{
					CurrentY += Yinc;
     61a:	e8 0c       	add	r14, r8
     61c:	f9 1c       	adc	r15, r9
					TwoDxAccumulatedError -= TwoDx;
     61e:	a2 18       	sub	r10, r2
     620:	b3 08       	sbc	r11, r3
				}
				GLCD_SetPixel(CurrentX, CurrentY, color);
     622:	80 2f       	mov	r24, r16
     624:	6e 2d       	mov	r22, r14
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     62c:	06 0d       	add	r16, r6
     62e:	17 1d       	adc	r17, r7
			} while (CurrentX != X2);
     630:	c8 01       	movw	r24, r16
     632:	86 19       	sub	r24, r6
     634:	97 09       	sbc	r25, r7
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	82 17       	cp	r24, r18
     63c:	93 07       	cpc	r25, r19
     63e:	41 f7       	brne	.-48     	; 0x610 <GLCD_Line+0xc4>
     640:	1f c0       	rjmp	.+62     	; 0x680 <GLCD_Line+0x134>
     642:	0d 81       	ldd	r16, Y+5	; 0x05
     644:	1e 81       	ldd	r17, Y+6	; 0x06
     646:	08 0d       	add	r16, r8
     648:	19 1d       	adc	r17, r9
     64a:	65 01       	movw	r12, r10
     64c:	aa 24       	eor	r10, r10
     64e:	bb 24       	eor	r11, r11
		{
			TwoDyAccumulatedError = 0;
			do
			{
				CurrentY += Yinc;
				TwoDyAccumulatedError += TwoDx;
     650:	a2 0c       	add	r10, r2
     652:	b3 1c       	adc	r11, r3
				if (TwoDyAccumulatedError>Dy)
     654:	ea 14       	cp	r14, r10
     656:	fb 04       	cpc	r15, r11
     658:	24 f4       	brge	.+8      	; 0x662 <GLCD_Line+0x116>
				{
					CurrentX += Xinc;
     65a:	c6 0c       	add	r12, r6
     65c:	d7 1c       	adc	r13, r7
					TwoDyAccumulatedError -= TwoDy;
     65e:	a4 18       	sub	r10, r4
     660:	b5 08       	sbc	r11, r5
				}
				GLCD_SetPixel(CurrentX, CurrentY, color);
     662:	8c 2d       	mov	r24, r12
     664:	60 2f       	mov	r22, r16
     666:	41 e0       	ldi	r20, 0x01	; 1
     668:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     66c:	08 0d       	add	r16, r8
     66e:	19 1d       	adc	r17, r9
			} while (CurrentY != Y2);
     670:	c8 01       	movw	r24, r16
     672:	88 19       	sub	r24, r8
     674:	99 09       	sbc	r25, r9
     676:	eb 81       	ldd	r30, Y+3	; 0x03
     678:	fc 81       	ldd	r31, Y+4	; 0x04
     67a:	8e 17       	cp	r24, r30
     67c:	9f 07       	cpc	r25, r31
     67e:	41 f7       	brne	.-48     	; 0x650 <GLCD_Line+0x104>
		}
	}
}
     680:	26 96       	adiw	r28, 0x06	; 6
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	6f 90       	pop	r6
     6a8:	5f 90       	pop	r5
     6aa:	4f 90       	pop	r4
     6ac:	3f 90       	pop	r3
     6ae:	2f 90       	pop	r2
     6b0:	08 95       	ret

000006b2 <main>:
	_delay_ms(300);
	cnt=0;
	}
}

int main(void){
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	c0 5e       	subi	r28, 0xE0	; 224
     6bc:	d2 40       	sbci	r29, 0x02	; 2
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	int ship5[SIZE5X][SIZE5Y] = {0};
     6c8:	fe 01       	movw	r30, r28
     6ca:	31 96       	adiw	r30, 0x01	; 1
     6cc:	80 ee       	ldi	r24, 0xE0	; 224
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	df 01       	movw	r26, r30
     6d2:	9c 01       	movw	r18, r24
     6d4:	1d 92       	st	X+, r1
     6d6:	21 50       	subi	r18, 0x01	; 1
     6d8:	30 40       	sbci	r19, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <main+0x22>
	sei();
     6dc:	78 94       	sei

	EICRA = 0xAA;
     6de:	8a ea       	ldi	r24, 0xAA	; 170
     6e0:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = 0x0F;
     6e4:	8f e0       	ldi	r24, 0x0F	; 15
     6e6:	89 bf       	out	0x39, r24	; 57

	GLCD_Initialize();
     6e8:	0e 94 9b 01 	call	0x336	; 0x336 <GLCD_Initialize>
	GLCD_Clear();
     6ec:	0e 94 da 01 	call	0x3b4	; 0x3b4 <GLCD_Clear>

	//PrintBoard(10);
	MakeShip5(ship5);
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <MakeShip5>
	

	while(1){
		PrintMode();
     6f8:	0e 94 33 05 	call	0xa66	; 0xa66 <PrintMode>
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <main+0x46>

000006fe <__vector_4>:
	_delay_ms(300);
	cnt=0;
	}
}

ISR(INT3_vect) {
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	0b b6       	in	r0, 0x3b	; 59
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	2f 93       	push	r18
     70e:	3f 93       	push	r19
     710:	4f 93       	push	r20
     712:	5f 93       	push	r21
     714:	6f 93       	push	r22
     716:	7f 93       	push	r23
     718:	8f 93       	push	r24
     71a:	9f 93       	push	r25
     71c:	af 93       	push	r26
     71e:	bf 93       	push	r27
     720:	ef 93       	push	r30
     722:	ff 93       	push	r31
	EICRA = 0x00;
     724:	10 92 6a 00 	sts	0x006A, r1
    cnt++;
     728:	80 91 36 02 	lds	r24, 0x0236
     72c:	90 91 37 02 	lds	r25, 0x0237
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	90 93 37 02 	sts	0x0237, r25
     736:	80 93 36 02 	sts	0x0236, r24
	
	if(cnt>9500){
     73a:	80 91 36 02 	lds	r24, 0x0236
     73e:	90 91 37 02 	lds	r25, 0x0237
     742:	8d 51       	subi	r24, 0x1D	; 29
     744:	95 42       	sbci	r25, 0x25	; 37
     746:	a4 f1       	brlt	.+104    	; 0x7b0 <__vector_4+0xb2>
	GLCD_dselect(x,y);
     748:	80 91 32 02 	lds	r24, 0x0232
     74c:	90 91 33 02 	lds	r25, 0x0233
     750:	60 91 34 02 	lds	r22, 0x0234
     754:	70 91 35 02 	lds	r23, 0x0235
     758:	0e 94 16 08 	call	0x102c	; 0x102c <GLCD_dselect>
	y++;
     75c:	80 91 34 02 	lds	r24, 0x0234
     760:	90 91 35 02 	lds	r25, 0x0235
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 35 02 	sts	0x0235, r25
     76a:	80 93 34 02 	sts	0x0234, r24
	if(y>9)
     76e:	80 91 34 02 	lds	r24, 0x0234
     772:	90 91 35 02 	lds	r25, 0x0235
     776:	0a 97       	sbiw	r24, 0x0a	; 10
     778:	24 f0       	brlt	.+8      	; 0x782 <__vector_4+0x84>
		y=0;
     77a:	10 92 35 02 	sts	0x0235, r1
     77e:	10 92 34 02 	sts	0x0234, r1
	GLCD_select(x,y);
     782:	80 91 32 02 	lds	r24, 0x0232
     786:	90 91 33 02 	lds	r25, 0x0233
     78a:	60 91 34 02 	lds	r22, 0x0234
     78e:	70 91 35 02 	lds	r23, 0x0235
     792:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GLCD_select>
     796:	88 eb       	ldi	r24, 0xB8	; 184
     798:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     79a:	20 e9       	ldi	r18, 0x90	; 144
     79c:	31 e0       	ldi	r19, 0x01	; 1
     79e:	f9 01       	movw	r30, r18
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__vector_4+0xa2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7a6:	d9 f7       	brne	.-10     	; 0x79e <__vector_4+0xa0>
	_delay_ms(300);
	cnt=0;
     7a8:	10 92 37 02 	sts	0x0237, r1
     7ac:	10 92 36 02 	sts	0x0236, r1
	}
}
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0b be       	out	0x3b, r0	; 59
     7cc:	0f 90       	pop	r0
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	0f 90       	pop	r0
     7d2:	1f 90       	pop	r1
     7d4:	18 95       	reti

000007d6 <__vector_3>:
	cnt=0;
	_delay_ms(300);
	}
}

ISR(INT2_vect) {
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	0b b6       	in	r0, 0x3b	; 59
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
	EICRA = 0x00;
     7fc:	10 92 6a 00 	sts	0x006A, r1
    cnt++;
     800:	80 91 36 02 	lds	r24, 0x0236
     804:	90 91 37 02 	lds	r25, 0x0237
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	90 93 37 02 	sts	0x0237, r25
     80e:	80 93 36 02 	sts	0x0236, r24
	
	if(cnt>9500){
     812:	80 91 36 02 	lds	r24, 0x0236
     816:	90 91 37 02 	lds	r25, 0x0237
     81a:	8d 51       	subi	r24, 0x1D	; 29
     81c:	95 42       	sbci	r25, 0x25	; 37
     81e:	a4 f1       	brlt	.+104    	; 0x888 <__vector_3+0xb2>
	GLCD_dselect(x,y);
     820:	80 91 32 02 	lds	r24, 0x0232
     824:	90 91 33 02 	lds	r25, 0x0233
     828:	60 91 34 02 	lds	r22, 0x0234
     82c:	70 91 35 02 	lds	r23, 0x0235
     830:	0e 94 16 08 	call	0x102c	; 0x102c <GLCD_dselect>
	x++;
     834:	80 91 32 02 	lds	r24, 0x0232
     838:	90 91 33 02 	lds	r25, 0x0233
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	90 93 33 02 	sts	0x0233, r25
     842:	80 93 32 02 	sts	0x0232, r24
	if(x>9)
     846:	80 91 32 02 	lds	r24, 0x0232
     84a:	90 91 33 02 	lds	r25, 0x0233
     84e:	0a 97       	sbiw	r24, 0x0a	; 10
     850:	24 f0       	brlt	.+8      	; 0x85a <__vector_3+0x84>
		x=0;
     852:	10 92 33 02 	sts	0x0233, r1
     856:	10 92 32 02 	sts	0x0232, r1
	GLCD_select(x,y);
     85a:	80 91 32 02 	lds	r24, 0x0232
     85e:	90 91 33 02 	lds	r25, 0x0233
     862:	60 91 34 02 	lds	r22, 0x0234
     866:	70 91 35 02 	lds	r23, 0x0235
     86a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GLCD_select>
     86e:	88 eb       	ldi	r24, 0xB8	; 184
     870:	9b e0       	ldi	r25, 0x0B	; 11
     872:	20 e9       	ldi	r18, 0x90	; 144
     874:	31 e0       	ldi	r19, 0x01	; 1
     876:	f9 01       	movw	r30, r18
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <__vector_3+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87e:	d9 f7       	brne	.-10     	; 0x876 <__vector_3+0xa0>
	_delay_ms(300);
	cnt=0;
     880:	10 92 37 02 	sts	0x0237, r1
     884:	10 92 36 02 	sts	0x0236, r1
	}
}
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	0b be       	out	0x3b, r0	; 59
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_2>:
	cnt=0;
	_delay_ms(300);
	}
}

ISR(INT1_vect) {
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
	EICRA = 0x00;
     8d4:	10 92 6a 00 	sts	0x006A, r1
    cnt++;
     8d8:	80 91 36 02 	lds	r24, 0x0236
     8dc:	90 91 37 02 	lds	r25, 0x0237
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	90 93 37 02 	sts	0x0237, r25
     8e6:	80 93 36 02 	sts	0x0236, r24
	
	if(cnt>9500){
     8ea:	80 91 36 02 	lds	r24, 0x0236
     8ee:	90 91 37 02 	lds	r25, 0x0237
     8f2:	8d 51       	subi	r24, 0x1D	; 29
     8f4:	95 42       	sbci	r25, 0x25	; 37
     8f6:	b4 f1       	brlt	.+108    	; 0x964 <__vector_2+0xb6>
	GLCD_dselect(x,y);
     8f8:	80 91 32 02 	lds	r24, 0x0232
     8fc:	90 91 33 02 	lds	r25, 0x0233
     900:	60 91 34 02 	lds	r22, 0x0234
     904:	70 91 35 02 	lds	r23, 0x0235
     908:	0e 94 16 08 	call	0x102c	; 0x102c <GLCD_dselect>
	y--;
     90c:	80 91 34 02 	lds	r24, 0x0234
     910:	90 91 35 02 	lds	r25, 0x0235
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	90 93 35 02 	sts	0x0235, r25
     91a:	80 93 34 02 	sts	0x0234, r24
	if(y<0)
     91e:	80 91 34 02 	lds	r24, 0x0234
     922:	90 91 35 02 	lds	r25, 0x0235
     926:	97 ff       	sbrs	r25, 7
     928:	06 c0       	rjmp	.+12     	; 0x936 <__vector_2+0x88>
		y=9;
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	90 93 35 02 	sts	0x0235, r25
     932:	80 93 34 02 	sts	0x0234, r24
	GLCD_select(x,y);
     936:	80 91 32 02 	lds	r24, 0x0232
     93a:	90 91 33 02 	lds	r25, 0x0233
     93e:	60 91 34 02 	lds	r22, 0x0234
     942:	70 91 35 02 	lds	r23, 0x0235
     946:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GLCD_select>
	cnt=0;
     94a:	10 92 37 02 	sts	0x0237, r1
     94e:	10 92 36 02 	sts	0x0236, r1
     952:	88 eb       	ldi	r24, 0xB8	; 184
     954:	9b e0       	ldi	r25, 0x0B	; 11
     956:	20 e9       	ldi	r18, 0x90	; 144
     958:	31 e0       	ldi	r19, 0x01	; 1
     95a:	f9 01       	movw	r30, r18
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <__vector_2+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     960:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     962:	d9 f7       	brne	.-10     	; 0x95a <__vector_2+0xac>
	_delay_ms(300);
	}
}
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0b be       	out	0x3b, r0	; 59
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_1>:
#define SIZE5X 46
#define SIZE5Y 8

volatile int x = 0, y = 0, cnt = 0;

ISR(INT0_vect) {
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	0b b6       	in	r0, 0x3b	; 59
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	EICRA = 0x00;
     9b0:	10 92 6a 00 	sts	0x006A, r1
    cnt++;
     9b4:	80 91 36 02 	lds	r24, 0x0236
     9b8:	90 91 37 02 	lds	r25, 0x0237
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	90 93 37 02 	sts	0x0237, r25
     9c2:	80 93 36 02 	sts	0x0236, r24
	
	if(cnt>9500){
     9c6:	80 91 36 02 	lds	r24, 0x0236
     9ca:	90 91 37 02 	lds	r25, 0x0237
     9ce:	8d 51       	subi	r24, 0x1D	; 29
     9d0:	95 42       	sbci	r25, 0x25	; 37
     9d2:	b4 f1       	brlt	.+108    	; 0xa40 <__vector_1+0xb6>
	GLCD_dselect(x,y);
     9d4:	80 91 32 02 	lds	r24, 0x0232
     9d8:	90 91 33 02 	lds	r25, 0x0233
     9dc:	60 91 34 02 	lds	r22, 0x0234
     9e0:	70 91 35 02 	lds	r23, 0x0235
     9e4:	0e 94 16 08 	call	0x102c	; 0x102c <GLCD_dselect>
	x--;
     9e8:	80 91 32 02 	lds	r24, 0x0232
     9ec:	90 91 33 02 	lds	r25, 0x0233
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	90 93 33 02 	sts	0x0233, r25
     9f6:	80 93 32 02 	sts	0x0232, r24
	if(x<0)
     9fa:	80 91 32 02 	lds	r24, 0x0232
     9fe:	90 91 33 02 	lds	r25, 0x0233
     a02:	97 ff       	sbrs	r25, 7
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <__vector_1+0x88>
		x = 9;
     a06:	89 e0       	ldi	r24, 0x09	; 9
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 33 02 	sts	0x0233, r25
     a0e:	80 93 32 02 	sts	0x0232, r24
	GLCD_select(x,y);
     a12:	80 91 32 02 	lds	r24, 0x0232
     a16:	90 91 33 02 	lds	r25, 0x0233
     a1a:	60 91 34 02 	lds	r22, 0x0234
     a1e:	70 91 35 02 	lds	r23, 0x0235
     a22:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GLCD_select>
	cnt=0;
     a26:	10 92 37 02 	sts	0x0237, r1
     a2a:	10 92 36 02 	sts	0x0236, r1
     a2e:	88 eb       	ldi	r24, 0xB8	; 184
     a30:	9b e0       	ldi	r25, 0x0B	; 11
     a32:	20 e9       	ldi	r18, 0x90	; 144
     a34:	31 e0       	ldi	r19, 0x01	; 1
     a36:	f9 01       	movw	r30, r18
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <__vector_1+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3e:	d9 f7       	brne	.-10     	; 0xa36 <__vector_1+0xac>
	_delay_ms(300);
	}
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0b be       	out	0x3b, r0	; 59
     a5c:	0f 90       	pop	r0
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	0f 90       	pop	r0
     a62:	1f 90       	pop	r1
     a64:	18 95       	reti

00000a66 <PrintMode>:
			break;
	}
}

void PrintMode(void){
	GLCD_TextGoTo(9,4);
     a66:	89 e0       	ldi	r24, 0x09	; 9
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	64 e0       	ldi	r22, 0x04	; 4
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <GLCD_TextGoTo>
	GLCD_WriteString("Select Mode");
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	0e 94 46 01 	call	0x28c	; 0x28c <GLCD_WriteString>
	
	GLCD_TextGoTo(7,7);
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	67 e0       	ldi	r22, 0x07	; 7
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	0e 94 d6 00 	call	0x1ac	; 0x1ac <GLCD_TextGoTo>
	GLCD_WriteString("1. Single Play");
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	0e 94 46 01 	call	0x28c	; 0x28c <GLCD_WriteString>
	GLCD_TextGoTo(7,9);
     a8e:	87 e0       	ldi	r24, 0x07	; 7
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	69 e0       	ldi	r22, 0x09	; 9
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 d6 00 	call	0x1ac	; 0x1ac <GLCD_TextGoTo>
	GLCD_WriteString("2. Multi Play");
     a9a:	8c e1       	ldi	r24, 0x1C	; 28
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 46 01 	call	0x28c	; 0x28c <GLCD_WriteString>
}
     aa2:	08 95       	ret

00000aa4 <PrintShip5>:
		_delay_ms(delay);
		GLCD_dselect(x,y);
		_delay_ms(delay);	
}

void PrintShip5(int arr[][SIZE5Y], int x, int y, int rotate) {
     aa4:	2f 92       	push	r2
     aa6:	3f 92       	push	r3
     aa8:	4f 92       	push	r4
     aaa:	5f 92       	push	r5
     aac:	6f 92       	push	r6
     aae:	7f 92       	push	r7
     ab0:	8f 92       	push	r8
     ab2:	9f 92       	push	r9
     ab4:	af 92       	push	r10
     ab6:	bf 92       	push	r11
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	62 97       	sbiw	r28, 0x12	; 18
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	cd bf       	out	0x3d, r28	; 61
     ad8:	fc 01       	movw	r30, r24
	int i,j;

	switch(rotate){
     ada:	22 30       	cpi	r18, 0x02	; 2
     adc:	31 05       	cpc	r19, r1
     ade:	09 f4       	brne	.+2      	; 0xae2 <PrintShip5+0x3e>
     ae0:	67 c0       	rjmp	.+206    	; 0xbb0 <PrintShip5+0x10c>
     ae2:	23 30       	cpi	r18, 0x03	; 3
     ae4:	31 05       	cpc	r19, r1
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <PrintShip5+0x4e>
     ae8:	21 30       	cpi	r18, 0x01	; 1
     aea:	31 05       	cpc	r19, r1
     aec:	09 f0       	breq	.+2      	; 0xaf0 <PrintShip5+0x4c>
     aee:	8d c1       	rjmp	.+794    	; 0xe0a <PrintShip5+0x366>
     af0:	87 c0       	rjmp	.+270    	; 0xc00 <PrintShip5+0x15c>
     af2:	23 30       	cpi	r18, 0x03	; 3
     af4:	31 05       	cpc	r19, r1
     af6:	79 f1       	breq	.+94     	; 0xb56 <PrintShip5+0xb2>
     af8:	24 30       	cpi	r18, 0x04	; 4
     afa:	31 05       	cpc	r19, r1
     afc:	09 f0       	breq	.+2      	; 0xb00 <PrintShip5+0x5c>
     afe:	85 c1       	rjmp	.+778    	; 0xe0a <PrintShip5+0x366>
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[SIZE5X - i -1][j] == 1)
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 1);
     b00:	8b e0       	ldi	r24, 0x0B	; 11
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	68 9f       	mul	r22, r24
     b06:	90 01       	movw	r18, r0
     b08:	69 9f       	mul	r22, r25
     b0a:	30 0d       	add	r19, r0
     b0c:	78 9f       	mul	r23, r24
     b0e:	30 0d       	add	r19, r0
     b10:	11 24       	eor	r1, r1
     b12:	b2 e4       	ldi	r27, 0x42	; 66
     b14:	6b 2e       	mov	r6, r27
     b16:	71 2c       	mov	r7, r1
     b18:	62 0e       	add	r6, r18
     b1a:	73 1e       	adc	r7, r19
     b1c:	bc 01       	movw	r22, r24
     b1e:	46 9f       	mul	r20, r22
     b20:	c0 01       	movw	r24, r0
     b22:	47 9f       	mul	r20, r23
     b24:	90 0d       	add	r25, r0
     b26:	56 9f       	mul	r21, r22
     b28:	90 0d       	add	r25, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	a0 ed       	ldi	r26, 0xD0	; 208
     b2e:	8a 2e       	mov	r8, r26
     b30:	a2 e0       	ldi	r26, 0x02	; 2
     b32:	9a 2e       	mov	r9, r26
     b34:	8e 0e       	add	r8, r30
     b36:	9f 1e       	adc	r9, r31
     b38:	8c 01       	movw	r16, r24
     b3a:	09 51       	subi	r16, 0x19	; 25
     b3c:	10 40       	sbci	r17, 0x00	; 0
     b3e:	58 01       	movw	r10, r16
					else
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     b40:	ea e4       	ldi	r30, 0x4A	; 74
     b42:	2e 2e       	mov	r2, r30
     b44:	31 2c       	mov	r3, r1
     b46:	22 0e       	add	r2, r18
     b48:	33 1e       	adc	r3, r19
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 1);
					else
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
     b4a:	75 e1       	ldi	r23, 0x15	; 21
     b4c:	47 2e       	mov	r4, r23
     b4e:	51 2c       	mov	r5, r1
     b50:	48 0e       	add	r4, r24
     b52:	59 1e       	adc	r5, r25
     b54:	51 c1       	rjmp	.+674    	; 0xdf8 <PrintShip5+0x354>
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[SIZE5X - i -1][SIZE5Y - j -1] == 1)
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 1);
     b56:	8b e0       	ldi	r24, 0x0B	; 11
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	68 9f       	mul	r22, r24
     b5c:	90 01       	movw	r18, r0
     b5e:	69 9f       	mul	r22, r25
     b60:	30 0d       	add	r19, r0
     b62:	78 9f       	mul	r23, r24
     b64:	30 0d       	add	r19, r0
     b66:	11 24       	eor	r1, r1
     b68:	bc 01       	movw	r22, r24
     b6a:	46 9f       	mul	r20, r22
     b6c:	c0 01       	movw	r24, r0
     b6e:	47 9f       	mul	r20, r23
     b70:	90 0d       	add	r25, r0
     b72:	56 9f       	mul	r21, r22
     b74:	90 0d       	add	r25, r0
     b76:	11 24       	eor	r1, r1
     b78:	63 e1       	ldi	r22, 0x13	; 19
     b7a:	66 2e       	mov	r6, r22
     b7c:	71 2c       	mov	r7, r1
     b7e:	68 0e       	add	r6, r24
     b80:	79 1e       	adc	r7, r25
     b82:	56 e1       	ldi	r21, 0x16	; 22
     b84:	a5 2e       	mov	r10, r21
     b86:	b1 2c       	mov	r11, r1
     b88:	a2 0e       	add	r10, r18
     b8a:	b3 1e       	adc	r11, r19
     b8c:	40 ed       	ldi	r20, 0xD0	; 208
     b8e:	84 2e       	mov	r8, r20
     b90:	42 e0       	ldi	r20, 0x02	; 2
     b92:	94 2e       	mov	r9, r20
     b94:	8e 0e       	add	r8, r30
     b96:	9f 1e       	adc	r9, r31
     b98:	65 01       	movw	r12, r10
					else
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     b9a:	0b e1       	ldi	r16, 0x1B	; 27
     b9c:	20 2e       	mov	r2, r16
     b9e:	31 2c       	mov	r3, r1
     ba0:	28 0e       	add	r2, r24
     ba2:	39 1e       	adc	r3, r25
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
					else
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
     ba4:	14 e4       	ldi	r17, 0x44	; 68
     ba6:	41 2e       	mov	r4, r17
     ba8:	51 2c       	mov	r5, r1
     baa:	42 0e       	add	r4, r18
     bac:	53 1e       	adc	r5, r19
     bae:	ed c0       	rjmp	.+474    	; 0xd8a <PrintShip5+0x2e6>
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[i][SIZE5Y - 1 -j] == 1)
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
     bb0:	8b e0       	ldi	r24, 0x0B	; 11
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	68 9f       	mul	r22, r24
     bb6:	90 01       	movw	r18, r0
     bb8:	69 9f       	mul	r22, r25
     bba:	30 0d       	add	r19, r0
     bbc:	78 9f       	mul	r23, r24
     bbe:	30 0d       	add	r19, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	b2 e4       	ldi	r27, 0x42	; 66
     bc4:	6b 2e       	mov	r6, r27
     bc6:	71 2c       	mov	r7, r1
     bc8:	62 0e       	add	r6, r18
     bca:	73 1e       	adc	r7, r19
     bcc:	bc 01       	movw	r22, r24
     bce:	46 9f       	mul	r20, r22
     bd0:	c0 01       	movw	r24, r0
     bd2:	47 9f       	mul	r20, r23
     bd4:	90 0d       	add	r25, r0
     bd6:	56 9f       	mul	r21, r22
     bd8:	90 0d       	add	r25, r0
     bda:	11 24       	eor	r1, r1
     bdc:	a3 e1       	ldi	r26, 0x13	; 19
     bde:	aa 2e       	mov	r10, r26
     be0:	b1 2c       	mov	r11, r1
     be2:	a8 0e       	add	r10, r24
     be4:	b9 1e       	adc	r11, r25
     be6:	4f 01       	movw	r8, r30
     be8:	65 01       	movw	r12, r10
					else
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     bea:	7a e4       	ldi	r23, 0x4A	; 74
     bec:	27 2e       	mov	r2, r23
     bee:	31 2c       	mov	r3, r1
     bf0:	22 0e       	add	r2, r18
     bf2:	33 1e       	adc	r3, r19
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 1);
					else
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
     bf4:	61 e4       	ldi	r22, 0x41	; 65
     bf6:	46 2e       	mov	r4, r22
     bf8:	51 2c       	mov	r5, r1
     bfa:	48 0e       	add	r4, r24
     bfc:	59 1e       	adc	r5, r25
     bfe:	8d c0       	rjmp	.+282    	; 0xd1a <PrintShip5+0x276>
	switch(rotate){
		case 1:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[i][j] == 1)
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 1);
     c00:	8b e0       	ldi	r24, 0x0B	; 11
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	68 9f       	mul	r22, r24
     c06:	90 01       	movw	r18, r0
     c08:	69 9f       	mul	r22, r25
     c0a:	30 0d       	add	r19, r0
     c0c:	78 9f       	mul	r23, r24
     c0e:	30 0d       	add	r19, r0
     c10:	11 24       	eor	r1, r1
     c12:	bc 01       	movw	r22, r24
     c14:	46 9f       	mul	r20, r22
     c16:	c0 01       	movw	r24, r0
     c18:	47 9f       	mul	r20, r23
     c1a:	90 0d       	add	r25, r0
     c1c:	56 9f       	mul	r21, r22
     c1e:	90 0d       	add	r25, r0
     c20:	11 24       	eor	r1, r1
     c22:	53 e1       	ldi	r21, 0x13	; 19
     c24:	65 2e       	mov	r6, r21
     c26:	71 2c       	mov	r7, r1
     c28:	68 0e       	add	r6, r24
     c2a:	79 1e       	adc	r7, r25
     c2c:	4f 01       	movw	r8, r30
     c2e:	89 01       	movw	r16, r18
     c30:	0e 5b       	subi	r16, 0xBE	; 190
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	58 01       	movw	r10, r16
	int i,j;

	switch(rotate){
		case 1:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     c36:	4b e1       	ldi	r20, 0x1B	; 27
     c38:	24 2e       	mov	r2, r20
     c3a:	31 2c       	mov	r3, r1
     c3c:	28 0e       	add	r2, r24
     c3e:	39 1e       	adc	r3, r25
void PrintShip5(int arr[][SIZE5Y], int x, int y, int rotate) {
	int i,j;

	switch(rotate){
		case 1:
			for(i=0;i<SIZE5X;i++)
     c40:	80 e7       	ldi	r24, 0x70	; 112
     c42:	48 2e       	mov	r4, r24
     c44:	51 2c       	mov	r5, r1
     c46:	42 0e       	add	r4, r18
     c48:	53 1e       	adc	r5, r19
     c4a:	2f c0       	rjmp	.+94     	; 0xcaa <PrintShip5+0x206>
				for(j=0;j<SIZE5Y;j++)
					if(arr[i][j] == 1)
     c4c:	f6 01       	movw	r30, r12
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	39 f4       	brne	.+14     	; 0xc64 <PrintShip5+0x1c0>
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 1);
     c56:	8f 85       	ldd	r24, Y+15	; 0x0f
     c58:	98 89       	ldd	r25, Y+16	; 0x10
     c5a:	69 89       	ldd	r22, Y+17	; 0x11
     c5c:	7a 89       	ldd	r23, Y+18	; 0x12
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <PrintShip5+0x1ca>
					else
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
     c64:	8f 81       	ldd	r24, Y+7	; 0x07
     c66:	98 85       	ldd	r25, Y+8	; 0x08
     c68:	b7 01       	movw	r22, r14
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	c6 0e       	add	r12, r22
     c78:	d7 1e       	adc	r13, r23
     c7a:	89 89       	ldd	r24, Y+17	; 0x11
     c7c:	9a 89       	ldd	r25, Y+18	; 0x12
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	9a 8b       	std	Y+18, r25	; 0x12
     c82:	89 8b       	std	Y+17, r24	; 0x11
     c84:	08 94       	sec
     c86:	e1 1c       	adc	r14, r1
     c88:	f1 1c       	adc	r15, r1
	int i,j;

	switch(rotate){
		case 1:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     c8a:	82 15       	cp	r24, r2
     c8c:	93 05       	cpc	r25, r3
     c8e:	f1 f6       	brne	.-68     	; 0xc4c <PrintShip5+0x1a8>
     c90:	e0 e1       	ldi	r30, 0x10	; 16
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8e 0e       	add	r8, r30
     c96:	9f 1e       	adc	r9, r31
     c98:	0f 5f       	subi	r16, 0xFF	; 255
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	08 94       	sec
     c9e:	a1 1c       	adc	r10, r1
     ca0:	b1 1c       	adc	r11, r1
void PrintShip5(int arr[][SIZE5Y], int x, int y, int rotate) {
	int i,j;

	switch(rotate){
		case 1:
			for(i=0;i<SIZE5X;i++)
     ca2:	04 15       	cp	r16, r4
     ca4:	15 05       	cpc	r17, r5
     ca6:	09 f4       	brne	.+2      	; 0xcaa <PrintShip5+0x206>
     ca8:	b0 c0       	rjmp	.+352    	; 0xe0a <PrintShip5+0x366>
     caa:	0f 87       	std	Y+15, r16	; 0x0f
     cac:	18 8b       	std	Y+16, r17	; 0x10
     cae:	af 82       	std	Y+7, r10	; 0x07
     cb0:	b8 86       	std	Y+8, r11	; 0x08
     cb2:	64 01       	movw	r12, r8
     cb4:	73 01       	movw	r14, r6
     cb6:	7a 8a       	std	Y+18, r7	; 0x12
     cb8:	69 8a       	std	Y+17, r6	; 0x11
     cba:	c8 cf       	rjmp	.-112    	; 0xc4c <PrintShip5+0x1a8>
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[i][SIZE5Y - 1 -j] == 1)
     cbc:	f7 01       	movw	r30, r14
     cbe:	86 85       	ldd	r24, Z+14	; 0x0e
     cc0:	97 85       	ldd	r25, Z+15	; 0x0f
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <PrintShip5+0x230>
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
     cc6:	89 89       	ldd	r24, Y+17	; 0x11
     cc8:	9a 89       	ldd	r25, Y+18	; 0x12
     cca:	6d 85       	ldd	r22, Y+13	; 0x0d
     ccc:	7e 85       	ldd	r23, Y+14	; 0x0e
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <PrintShip5+0x23a>
					else
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
     cd4:	c8 01       	movw	r24, r16
     cd6:	6d 81       	ldd	r22, Y+5	; 0x05
     cd8:	7e 81       	ldd	r23, Y+6	; 0x06
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     ce2:	6e ef       	ldi	r22, 0xFE	; 254
     ce4:	7f ef       	ldi	r23, 0xFF	; 255
     ce6:	e6 0e       	add	r14, r22
     ce8:	f7 1e       	adc	r15, r23
     cea:	89 89       	ldd	r24, Y+17	; 0x11
     cec:	9a 89       	ldd	r25, Y+18	; 0x12
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	9a 8b       	std	Y+18, r25	; 0x12
     cf2:	89 8b       	std	Y+17, r24	; 0x11
     cf4:	0f 5f       	subi	r16, 0xFF	; 255
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
					else
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     cf8:	82 15       	cp	r24, r2
     cfa:	93 05       	cpc	r25, r3
     cfc:	f9 f6       	brne	.-66     	; 0xcbc <PrintShip5+0x218>
     cfe:	08 94       	sec
     d00:	c1 1c       	adc	r12, r1
     d02:	d1 1c       	adc	r13, r1
     d04:	08 94       	sec
     d06:	a1 1c       	adc	r10, r1
     d08:	b1 1c       	adc	r11, r1
     d0a:	e0 e1       	ldi	r30, 0x10	; 16
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8e 0e       	add	r8, r30
     d10:	9f 1e       	adc	r9, r31
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 1);
					else
						GLCD_SetPixel(11*x+66+i, 11*y+19+j, 0);
			break;
		case 2:
			for(i=0;i<SIZE5X;i++)
     d12:	c4 14       	cp	r12, r4
     d14:	d5 04       	cpc	r13, r5
     d16:	09 f4       	brne	.+2      	; 0xd1a <PrintShip5+0x276>
     d18:	78 c0       	rjmp	.+240    	; 0xe0a <PrintShip5+0x366>
     d1a:	cd 86       	std	Y+13, r12	; 0x0d
     d1c:	de 86       	std	Y+14, r13	; 0x0e
     d1e:	ad 82       	std	Y+5, r10	; 0x05
     d20:	be 82       	std	Y+6, r11	; 0x06
     d22:	7a 8a       	std	Y+18, r7	; 0x12
     d24:	69 8a       	std	Y+17, r6	; 0x11
     d26:	74 01       	movw	r14, r8
     d28:	83 01       	movw	r16, r6
     d2a:	c8 cf       	rjmp	.-112    	; 0xcbc <PrintShip5+0x218>
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[SIZE5X - i -1][SIZE5Y - j -1] == 1)
     d2c:	f7 01       	movw	r30, r14
     d2e:	86 85       	ldd	r24, Z+14	; 0x0e
     d30:	97 85       	ldd	r25, Z+15	; 0x0f
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	39 f4       	brne	.+14     	; 0xd44 <PrintShip5+0x2a0>
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 1);
     d36:	8b 85       	ldd	r24, Y+11	; 0x0b
     d38:	9c 85       	ldd	r25, Y+12	; 0x0c
     d3a:	69 89       	ldd	r22, Y+17	; 0x11
     d3c:	7a 89       	ldd	r23, Y+18	; 0x12
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <PrintShip5+0x2aa>
					else
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	b8 01       	movw	r22, r16
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     d52:	6e ef       	ldi	r22, 0xFE	; 254
     d54:	7f ef       	ldi	r23, 0xFF	; 255
     d56:	e6 0e       	add	r14, r22
     d58:	f7 1e       	adc	r15, r23
     d5a:	89 89       	ldd	r24, Y+17	; 0x11
     d5c:	9a 89       	ldd	r25, Y+18	; 0x12
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9a 8b       	std	Y+18, r25	; 0x12
     d62:	89 8b       	std	Y+17, r24	; 0x11
     d64:	0f 5f       	subi	r16, 0xFF	; 255
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
					else
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     d68:	82 15       	cp	r24, r2
     d6a:	93 05       	cpc	r25, r3
     d6c:	f9 f6       	brne	.-66     	; 0xd2c <PrintShip5+0x288>
     d6e:	08 94       	sec
     d70:	c1 1c       	adc	r12, r1
     d72:	d1 1c       	adc	r13, r1
     d74:	08 94       	sec
     d76:	a1 1c       	adc	r10, r1
     d78:	b1 1c       	adc	r11, r1
     d7a:	e0 ef       	ldi	r30, 0xF0	; 240
     d7c:	ff ef       	ldi	r31, 0xFF	; 255
     d7e:	8e 0e       	add	r8, r30
     d80:	9f 1e       	adc	r9, r31
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
					else
						GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
			break;
		case 3:
			for(i=0;i<SIZE5X;i++)
     d82:	c4 14       	cp	r12, r4
     d84:	d5 04       	cpc	r13, r5
     d86:	09 f4       	brne	.+2      	; 0xd8a <PrintShip5+0x2e6>
     d88:	40 c0       	rjmp	.+128    	; 0xe0a <PrintShip5+0x366>
     d8a:	cb 86       	std	Y+11, r12	; 0x0b
     d8c:	dc 86       	std	Y+12, r13	; 0x0c
     d8e:	ab 82       	std	Y+3, r10	; 0x03
     d90:	bc 82       	std	Y+4, r11	; 0x04
     d92:	7a 8a       	std	Y+18, r7	; 0x12
     d94:	69 8a       	std	Y+17, r6	; 0x11
     d96:	74 01       	movw	r14, r8
     d98:	83 01       	movw	r16, r6
     d9a:	c8 cf       	rjmp	.-112    	; 0xd2c <PrintShip5+0x288>
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
					if(arr[SIZE5X - i -1][j] == 1)
     d9c:	f6 01       	movw	r30, r12
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <PrintShip5+0x310>
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 1);
     da6:	89 89       	ldd	r24, Y+17	; 0x11
     da8:	9a 89       	ldd	r25, Y+18	; 0x12
     daa:	69 85       	ldd	r22, Y+9	; 0x09
     dac:	7a 85       	ldd	r23, Y+10	; 0x0a
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <PrintShip5+0x31a>
					else
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 0);
     db4:	c7 01       	movw	r24, r14
     db6:	69 81       	ldd	r22, Y+1	; 0x01
     db8:	7a 81       	ldd	r23, Y+2	; 0x02
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
     dc2:	62 e0       	ldi	r22, 0x02	; 2
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	c6 0e       	add	r12, r22
     dc8:	d7 1e       	adc	r13, r23
     dca:	89 89       	ldd	r24, Y+17	; 0x11
     dcc:	9a 89       	ldd	r25, Y+18	; 0x12
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	9a 8b       	std	Y+18, r25	; 0x12
     dd2:	89 8b       	std	Y+17, r24	; 0x11
     dd4:	08 94       	sec
     dd6:	e1 1c       	adc	r14, r1
     dd8:	f1 1c       	adc	r15, r1
					else
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
				for(j=0;j<SIZE5Y;j++)
     dda:	82 15       	cp	r24, r2
     ddc:	93 05       	cpc	r25, r3
     dde:	f1 f6       	brne	.-68     	; 0xd9c <PrintShip5+0x2f8>
     de0:	e0 ef       	ldi	r30, 0xF0	; 240
     de2:	ff ef       	ldi	r31, 0xFF	; 255
     de4:	8e 0e       	add	r8, r30
     de6:	9f 1e       	adc	r9, r31
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	08 94       	sec
     dee:	a1 1c       	adc	r10, r1
     df0:	b1 1c       	adc	r11, r1
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 1);
					else
						GLCD_SetPixel(11*(x-4)+66+i, 11*(y)+19+j, 0);
			break;
		case 4:
			for(i=0;i<SIZE5X;i++)
     df2:	04 15       	cp	r16, r4
     df4:	15 05       	cpc	r17, r5
     df6:	49 f0       	breq	.+18     	; 0xe0a <PrintShip5+0x366>
     df8:	09 87       	std	Y+9, r16	; 0x09
     dfa:	1a 87       	std	Y+10, r17	; 0x0a
     dfc:	a9 82       	std	Y+1, r10	; 0x01
     dfe:	ba 82       	std	Y+2, r11	; 0x02
     e00:	64 01       	movw	r12, r8
     e02:	7a 8a       	std	Y+18, r7	; 0x12
     e04:	69 8a       	std	Y+17, r6	; 0x11
     e06:	73 01       	movw	r14, r6
     e08:	c9 cf       	rjmp	.-110    	; 0xd9c <PrintShip5+0x2f8>
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 1);
					else
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 0);
			break;
	}
}
     e0a:	62 96       	adiw	r28, 0x12	; 18
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	7f 90       	pop	r7
     e30:	6f 90       	pop	r6
     e32:	5f 90       	pop	r5
     e34:	4f 90       	pop	r4
     e36:	3f 90       	pop	r3
     e38:	2f 90       	pop	r2
     e3a:	08 95       	ret

00000e3c <DrawSquare>:
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
 
}

void DrawSquare(int x, int y) {
     e3c:	2f 92       	push	r2
     e3e:	3f 92       	push	r3
     e40:	4f 92       	push	r4
     e42:	5f 92       	push	r5
     e44:	6f 92       	push	r6
     e46:	7f 92       	push	r7
     e48:	8f 92       	push	r8
     e4a:	9f 92       	push	r9
     e4c:	af 92       	push	r10
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	28 97       	sbiw	r28, 0x08	; 8
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61

	for(i=0;i<=11;i++)
		for(j=0;j<=11;j++) {
			if(i == 0 || i == 11) 		GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
			else if(j==0 || j == 11)	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
			else 	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 0);
     e70:	2b e0       	ldi	r18, 0x0B	; 11
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	62 9f       	mul	r22, r18
     e76:	30 01       	movw	r6, r0
     e78:	63 9f       	mul	r22, r19
     e7a:	70 0c       	add	r7, r0
     e7c:	72 9f       	mul	r23, r18
     e7e:	70 0c       	add	r7, r0
     e80:	11 24       	eor	r1, r1
     e82:	41 e1       	ldi	r20, 0x11	; 17
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	64 0e       	add	r6, r20
     e88:	75 1e       	adc	r7, r21
     e8a:	82 9f       	mul	r24, r18
     e8c:	f0 01       	movw	r30, r0
     e8e:	83 9f       	mul	r24, r19
     e90:	f0 0d       	add	r31, r0
     e92:	92 9f       	mul	r25, r18
     e94:	f0 0d       	add	r31, r0
     e96:	11 24       	eor	r1, r1
     e98:	e0 5c       	subi	r30, 0xC0	; 192
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	f8 87       	std	Y+8, r31	; 0x08
     e9e:	ef 83       	std	Y+7, r30	; 0x07
     ea0:	1f 01       	movw	r2, r30
     ea2:	2f 01       	movw	r4, r30
     ea4:	ee 24       	eor	r14, r14
     ea6:	ff 24       	eor	r15, r15
     ea8:	3f c0       	rjmp	.+126    	; 0xf28 <DrawSquare+0xec>
void DrawSquare(int x, int y) {
	int i,j;

	for(i=0;i<=11;i++)
		for(j=0;j<=11;j++) {
			if(i == 0 || i == 11) 		GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
     eaa:	e1 14       	cp	r14, r1
     eac:	f1 04       	cpc	r15, r1
     eae:	21 f0       	breq	.+8      	; 0xeb8 <DrawSquare+0x7c>
     eb0:	fb e0       	ldi	r31, 0x0B	; 11
     eb2:	ef 16       	cp	r14, r31
     eb4:	f1 04       	cpc	r15, r1
     eb6:	21 f4       	brne	.+8      	; 0xec0 <DrawSquare+0x84>
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	b4 01       	movw	r22, r8
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <DrawSquare+0x96>
			else if(j==0 || j == 11)	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	19 f0       	breq	.+6      	; 0xecc <DrawSquare+0x90>
     ec6:	0b 30       	cpi	r16, 0x0B	; 11
     ec8:	11 05       	cpc	r17, r1
     eca:	31 f4       	brne	.+12     	; 0xed8 <DrawSquare+0x9c>
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	b5 01       	movw	r22, r10
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <DrawSquare+0xa6>
			else 	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 0);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	b6 01       	movw	r22, r12
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>

void DrawSquare(int x, int y) {
	int i,j;

	for(i=0;i<=11;i++)
		for(j=0;j<=11;j++) {
     ee6:	0f 5f       	subi	r16, 0xFF	; 255
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	08 94       	sec
     eec:	81 1c       	adc	r8, r1
     eee:	91 1c       	adc	r9, r1
     ef0:	08 94       	sec
     ef2:	a1 1c       	adc	r10, r1
     ef4:	b1 1c       	adc	r11, r1
     ef6:	08 94       	sec
     ef8:	c1 1c       	adc	r12, r1
     efa:	d1 1c       	adc	r13, r1
     efc:	0c 30       	cpi	r16, 0x0C	; 12
     efe:	11 05       	cpc	r17, r1
     f00:	a1 f6       	brne	.-88     	; 0xeaa <DrawSquare+0x6e>
}

void DrawSquare(int x, int y) {
	int i,j;

	for(i=0;i<=11;i++)
     f02:	08 94       	sec
     f04:	e1 1c       	adc	r14, r1
     f06:	f1 1c       	adc	r15, r1
     f08:	4f 81       	ldd	r20, Y+7	; 0x07
     f0a:	58 85       	ldd	r21, Y+8	; 0x08
     f0c:	4f 5f       	subi	r20, 0xFF	; 255
     f0e:	5f 4f       	sbci	r21, 0xFF	; 255
     f10:	58 87       	std	Y+8, r21	; 0x08
     f12:	4f 83       	std	Y+7, r20	; 0x07
     f14:	08 94       	sec
     f16:	21 1c       	adc	r2, r1
     f18:	31 1c       	adc	r3, r1
     f1a:	08 94       	sec
     f1c:	41 1c       	adc	r4, r1
     f1e:	51 1c       	adc	r5, r1
     f20:	5c e0       	ldi	r21, 0x0C	; 12
     f22:	e5 16       	cp	r14, r21
     f24:	f1 04       	cpc	r15, r1
     f26:	71 f0       	breq	.+28     	; 0xf44 <DrawSquare+0x108>
     f28:	49 82       	std	Y+1, r4	; 0x01
     f2a:	5a 82       	std	Y+2, r5	; 0x02
     f2c:	2b 82       	std	Y+3, r2	; 0x03
     f2e:	3c 82       	std	Y+4, r3	; 0x04
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	43 01       	movw	r8, r6
     f3a:	53 01       	movw	r10, r6
     f3c:	63 01       	movw	r12, r6
     f3e:	00 e0       	ldi	r16, 0x00	; 0
     f40:	10 e0       	ldi	r17, 0x00	; 0
     f42:	b3 cf       	rjmp	.-154    	; 0xeaa <DrawSquare+0x6e>
			if(i == 0 || i == 11) 		GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
			else if(j==0 || j == 11)	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 1);
			else 	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 0);
		}
			
}
     f44:	28 96       	adiw	r28, 0x08	; 8
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	7f 90       	pop	r7
     f6a:	6f 90       	pop	r6
     f6c:	5f 90       	pop	r5
     f6e:	4f 90       	pop	r4
     f70:	3f 90       	pop	r3
     f72:	2f 90       	pop	r2
     f74:	08 95       	ret

00000f76 <PrintShipClear>:
						GLCD_SetPixel(11*x+66+j, 11*(y-4)+19+i, 0);
			break;
	}
}

void PrintShipClear(int x, int y, int size, int rotate) {
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	6c 01       	movw	r12, r24
     f88:	7b 01       	movw	r14, r22
     f8a:	8a 01       	movw	r16, r20
	int i;
	switch(rotate){
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	31 05       	cpc	r19, r1
     f90:	99 f0       	breq	.+38     	; 0xfb8 <PrintShipClear+0x42>
     f92:	23 30       	cpi	r18, 0x03	; 3
     f94:	31 05       	cpc	r19, r1
     f96:	24 f4       	brge	.+8      	; 0xfa0 <PrintShipClear+0x2a>
     f98:	21 30       	cpi	r18, 0x01	; 1
     f9a:	31 05       	cpc	r19, r1
     f9c:	f1 f5       	brne	.+124    	; 0x101a <PrintShipClear+0xa4>
     f9e:	0f c0       	rjmp	.+30     	; 0xfbe <PrintShipClear+0x48>
     fa0:	23 30       	cpi	r18, 0x03	; 3
     fa2:	31 05       	cpc	r19, r1
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <PrintShipClear+0x3c>
     fa6:	24 30       	cpi	r18, 0x04	; 4
     fa8:	31 05       	cpc	r19, r1
     faa:	b9 f5       	brne	.+110    	; 0x101a <PrintShipClear+0xa4>
     fac:	c0 e0       	ldi	r28, 0x00	; 0
     fae:	d0 e0       	ldi	r29, 0x00	; 0
     fb0:	31 c0       	rjmp	.+98     	; 0x1014 <PrintShipClear+0x9e>
     fb2:	c0 e0       	ldi	r28, 0x00	; 0
     fb4:	d0 e0       	ldi	r29, 0x00	; 0
     fb6:	23 c0       	rjmp	.+70     	; 0xffe <PrintShipClear+0x88>
     fb8:	c0 e0       	ldi	r28, 0x00	; 0
     fba:	d0 e0       	ldi	r29, 0x00	; 0
     fbc:	15 c0       	rjmp	.+42     	; 0xfe8 <PrintShipClear+0x72>
     fbe:	c0 e0       	ldi	r28, 0x00	; 0
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <PrintShipClear+0x5c>
		case 1:
			for(i=0;i<size;i++)
				DrawSquare(x + i,y);
     fc4:	ce 01       	movw	r24, r28
     fc6:	8c 0d       	add	r24, r12
     fc8:	9d 1d       	adc	r25, r13
     fca:	b7 01       	movw	r22, r14
     fcc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DrawSquare>

void PrintShipClear(int x, int y, int size, int rotate) {
	int i;
	switch(rotate){
		case 1:
			for(i=0;i<size;i++)
     fd0:	21 96       	adiw	r28, 0x01	; 1
     fd2:	c0 17       	cp	r28, r16
     fd4:	d1 07       	cpc	r29, r17
     fd6:	b4 f3       	brlt	.-20     	; 0xfc4 <PrintShipClear+0x4e>
     fd8:	20 c0       	rjmp	.+64     	; 0x101a <PrintShipClear+0xa4>
				DrawSquare(x + i,y);
			break;
		case 2:
			for(i=0;i<size;i++)
				DrawSquare(x,y + i);
     fda:	be 01       	movw	r22, r28
     fdc:	6e 0d       	add	r22, r14
     fde:	7f 1d       	adc	r23, r15
     fe0:	c6 01       	movw	r24, r12
     fe2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DrawSquare>
		case 1:
			for(i=0;i<size;i++)
				DrawSquare(x + i,y);
			break;
		case 2:
			for(i=0;i<size;i++)
     fe6:	21 96       	adiw	r28, 0x01	; 1
     fe8:	c0 17       	cp	r28, r16
     fea:	d1 07       	cpc	r29, r17
     fec:	b4 f3       	brlt	.-20     	; 0xfda <PrintShipClear+0x64>
     fee:	15 c0       	rjmp	.+42     	; 0x101a <PrintShipClear+0xa4>
				DrawSquare(x,y + i);
			break;
		case 3:
			for(i=0;i<size;i++)
				DrawSquare(x - i,y);
     ff0:	c6 01       	movw	r24, r12
     ff2:	8c 1b       	sub	r24, r28
     ff4:	9d 0b       	sbc	r25, r29
     ff6:	b7 01       	movw	r22, r14
     ff8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DrawSquare>
		case 2:
			for(i=0;i<size;i++)
				DrawSquare(x,y + i);
			break;
		case 3:
			for(i=0;i<size;i++)
     ffc:	21 96       	adiw	r28, 0x01	; 1
     ffe:	c0 17       	cp	r28, r16
    1000:	d1 07       	cpc	r29, r17
    1002:	b4 f3       	brlt	.-20     	; 0xff0 <PrintShipClear+0x7a>
    1004:	0a c0       	rjmp	.+20     	; 0x101a <PrintShipClear+0xa4>
				DrawSquare(x - i,y);
			break;
		case 4:
			for(i=0;i<size;i++)
				DrawSquare(x,y - i);
    1006:	b7 01       	movw	r22, r14
    1008:	6c 1b       	sub	r22, r28
    100a:	7d 0b       	sbc	r23, r29
    100c:	c6 01       	movw	r24, r12
    100e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DrawSquare>
		case 3:
			for(i=0;i<size;i++)
				DrawSquare(x - i,y);
			break;
		case 4:
			for(i=0;i<size;i++)
    1012:	21 96       	adiw	r28, 0x01	; 1
    1014:	c0 17       	cp	r28, r16
    1016:	d1 07       	cpc	r29, r17
    1018:	b4 f3       	brlt	.-20     	; 0x1006 <PrintShipClear+0x90>
				DrawSquare(x,y - i);
			break;
	}
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	08 95       	ret

0000102c <GLCD_dselect>:
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);

}

void GLCD_dselect(unsigned char x,unsigned char y) {
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    int j,i;
    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
    1044:	2b e0       	ldi	r18, 0x0B	; 11
    1046:	82 9f       	mul	r24, r18
    1048:	c0 01       	movw	r24, r0
    104a:	11 24       	eor	r1, r1
    104c:	62 9f       	mul	r22, r18
    104e:	b0 01       	movw	r22, r0
    1050:	11 24       	eor	r1, r1
    1052:	43 e1       	ldi	r20, 0x13	; 19
    1054:	a4 2e       	mov	r10, r20
    1056:	b1 2c       	mov	r11, r1
    1058:	a6 0e       	add	r10, r22
    105a:	b7 1e       	adc	r11, r23
    105c:	8c 01       	movw	r16, r24
    105e:	0e 5b       	subi	r16, 0xBE	; 190
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
}

void GLCD_dselect(unsigned char x,unsigned char y) {
    int j,i;
    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
    1062:	3b e1       	ldi	r19, 0x1B	; 27
    1064:	c3 2e       	mov	r12, r19
    1066:	d1 2c       	mov	r13, r1
    1068:	c6 0e       	add	r12, r22
    106a:	d7 1e       	adc	r13, r23

}

void GLCD_dselect(unsigned char x,unsigned char y) {
    int j,i;
    for(j=0;j<8;j++)
    106c:	2a e4       	ldi	r18, 0x4A	; 74
    106e:	e2 2e       	mov	r14, r18
    1070:	f1 2c       	mov	r15, r1
    1072:	e8 0e       	add	r14, r24
    1074:	f9 1e       	adc	r15, r25
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <GLCD_dselect+0x6a>
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
    1078:	c4 01       	movw	r24, r8
    107a:	be 01       	movw	r22, r28
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
    1084:	21 96       	adiw	r28, 0x01	; 1
}

void GLCD_dselect(unsigned char x,unsigned char y) {
    int j,i;
    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
    1086:	cc 15       	cp	r28, r12
    1088:	dd 05       	cpc	r29, r13
    108a:	b1 f7       	brne	.-20     	; 0x1078 <GLCD_dselect+0x4c>
    108c:	0f 5f       	subi	r16, 0xFF	; 255
    108e:	1f 4f       	sbci	r17, 0xFF	; 255

}

void GLCD_dselect(unsigned char x,unsigned char y) {
    int j,i;
    for(j=0;j<8;j++)
    1090:	0e 15       	cp	r16, r14
    1092:	1f 05       	cpc	r17, r15
    1094:	19 f0       	breq	.+6      	; 0x109c <GLCD_dselect+0x70>
    1096:	48 01       	movw	r8, r16
    1098:	e5 01       	movw	r28, r10
    109a:	ee cf       	rjmp	.-36     	; 0x1078 <GLCD_dselect+0x4c>
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 0);
 
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	08 95       	ret

000010b6 <GLCD_select>:
        GLCD_Line(64+11*i,127,64+11*i,17);
  	}

}

void GLCD_select(unsigned char x, unsigned char y) {
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    int j,i;

    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
    10ce:	2b e0       	ldi	r18, 0x0B	; 11
    10d0:	82 9f       	mul	r24, r18
    10d2:	c0 01       	movw	r24, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	62 9f       	mul	r22, r18
    10d8:	b0 01       	movw	r22, r0
    10da:	11 24       	eor	r1, r1
    10dc:	f3 e1       	ldi	r31, 0x13	; 19
    10de:	af 2e       	mov	r10, r31
    10e0:	b1 2c       	mov	r11, r1
    10e2:	a6 0e       	add	r10, r22
    10e4:	b7 1e       	adc	r11, r23
    10e6:	8c 01       	movw	r16, r24
    10e8:	0e 5b       	subi	r16, 0xBE	; 190
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255

void GLCD_select(unsigned char x, unsigned char y) {
    int j,i;

    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
    10ec:	eb e1       	ldi	r30, 0x1B	; 27
    10ee:	ce 2e       	mov	r12, r30
    10f0:	d1 2c       	mov	r13, r1
    10f2:	c6 0e       	add	r12, r22
    10f4:	d7 1e       	adc	r13, r23
}

void GLCD_select(unsigned char x, unsigned char y) {
    int j,i;

    for(j=0;j<8;j++)
    10f6:	5a e4       	ldi	r21, 0x4A	; 74
    10f8:	e5 2e       	mov	r14, r21
    10fa:	f1 2c       	mov	r15, r1
    10fc:	e8 0e       	add	r14, r24
    10fe:	f9 1e       	adc	r15, r25
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <__stack+0x21>
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);
    1102:	c4 01       	movw	r24, r8
    1104:	be 01       	movw	r22, r28
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <GLCD_SetPixel>
    110e:	21 96       	adiw	r28, 0x01	; 1

void GLCD_select(unsigned char x, unsigned char y) {
    int j,i;

    for(j=0;j<8;j++)
        for(i=0;i<8;i++)
    1110:	cc 15       	cp	r28, r12
    1112:	dd 05       	cpc	r29, r13
    1114:	b1 f7       	brne	.-20     	; 0x1102 <__stack+0x3>
    1116:	0f 5f       	subi	r16, 0xFF	; 255
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
}

void GLCD_select(unsigned char x, unsigned char y) {
    int j,i;

    for(j=0;j<8;j++)
    111a:	0e 15       	cp	r16, r14
    111c:	1f 05       	cpc	r17, r15
    111e:	19 f0       	breq	.+6      	; 0x1126 <__stack+0x27>
    1120:	48 01       	movw	r8, r16
    1122:	e5 01       	movw	r28, r10
    1124:	ee cf       	rjmp	.-36     	; 0x1102 <__stack+0x3>
        for(i=0;i<8;i++)
            GLCD_SetPixel(11*x+66+j, 11*y+19+i, 1);

}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	08 95       	ret

00001140 <PrintToggle>:
			else 	GLCD_SetPixel(11*x+64+i, 11*y+17+j, 0);
		}
			
}

void PrintToggle(int x, int y,int delay) {
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	98 2e       	mov	r9, r24
    1156:	86 2e       	mov	r8, r22
    1158:	7a 01       	movw	r14, r20
		GLCD_select(x,y);
    115a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <GLCD_select>
		_delay_ms(delay);
    115e:	00 27       	eor	r16, r16
    1160:	f7 fc       	sbrc	r15, 7
    1162:	00 95       	com	r16
    1164:	10 2f       	mov	r17, r16
    1166:	c8 01       	movw	r24, r16
    1168:	b7 01       	movw	r22, r14
    116a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__floatsisf>
    116e:	5b 01       	movw	r10, r22
    1170:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a e7       	ldi	r20, 0x7A	; 122
    1178:	55 e4       	ldi	r21, 0x45	; 69
    117a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__mulsf3>
    117e:	7b 01       	movw	r14, r22
    1180:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	1c f4       	brge	.+6      	; 0x1198 <PrintToggle+0x58>
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	24 c0       	rjmp	.+72     	; 0x11e0 <PrintToggle+0xa0>
		__ticks = 1;
	else if (__tmp > 65535)
    1198:	c8 01       	movw	r24, r16
    119a:	b7 01       	movw	r22, r14
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	4f e7       	ldi	r20, 0x7F	; 127
    11a2:	57 e4       	ldi	r21, 0x47	; 71
    11a4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__gtsf2>
    11a8:	18 16       	cp	r1, r24
    11aa:	b4 f4       	brge	.+44     	; 0x11d8 <PrintToggle+0x98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ac:	c6 01       	movw	r24, r12
    11ae:	b5 01       	movw	r22, r10
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	51 e4       	ldi	r21, 0x41	; 65
    11b8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__mulsf3>
    11bc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    11c0:	80 e9       	ldi	r24, 0x90	; 144
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <PrintToggle+0x90>
    11c6:	fc 01       	movw	r30, r24
    11c8:	31 97       	sbiw	r30, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <PrintToggle+0x88>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11cc:	61 50       	subi	r22, 0x01	; 1
    11ce:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d0:	61 15       	cp	r22, r1
    11d2:	71 05       	cpc	r23, r1
    11d4:	c1 f7       	brne	.-16     	; 0x11c6 <PrintToggle+0x86>
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <PrintToggle+0xa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	c8 01       	movw	r24, r16
    11da:	b7 01       	movw	r22, r14
    11dc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    11e0:	cb 01       	movw	r24, r22
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <PrintToggle+0xa2>
		GLCD_dselect(x,y);
    11e6:	89 2d       	mov	r24, r9
    11e8:	68 2d       	mov	r22, r8
    11ea:	0e 94 16 08 	call	0x102c	; 0x102c <GLCD_dselect>
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__ltsf2>
    11fe:	88 23       	and	r24, r24
    1200:	1c f4       	brge	.+6      	; 0x1208 <PrintToggle+0xc8>
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	24 c0       	rjmp	.+72     	; 0x1250 <PrintToggle+0x110>
		__ticks = 1;
	else if (__tmp > 65535)
    1208:	c8 01       	movw	r24, r16
    120a:	b7 01       	movw	r22, r14
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	b4 f4       	brge	.+44     	; 0x1248 <PrintToggle+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__mulsf3>
    122c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    1230:	80 e9       	ldi	r24, 0x90	; 144
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <PrintToggle+0x100>
    1236:	fc 01       	movw	r30, r24
    1238:	31 97       	sbiw	r30, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <PrintToggle+0xf8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	61 50       	subi	r22, 0x01	; 1
    123e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1240:	61 15       	cp	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	c1 f7       	brne	.-16     	; 0x1236 <PrintToggle+0xf6>
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <PrintToggle+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	c8 01       	movw	r24, r16
    124a:	b7 01       	movw	r22, r14
    124c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fixunssfsi>
    1250:	cb 01       	movw	r24, r22
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <PrintToggle+0x112>
		_delay_ms(delay);	
}
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	bf 90       	pop	r11
    1264:	af 90       	pop	r10
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	08 95       	ret

0000126c <PrintBoard>:
#include "print.h"
#include <avr/delay.h>
#define SIZE5X 46
#define SIZE5Y 8
 
void PrintBoard(int size){
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	7c 01       	movw	r14, r24
    127e:	00 e0       	ldi	r16, 0x00	; 0
    1280:	10 e0       	ldi	r17, 0x00	; 0
    1282:	cf e7       	ldi	r28, 0x7F	; 127
    1284:	d0 e0       	ldi	r29, 0x00	; 0
	int i;

	for(i=0;i <=size;i++) {
        GLCD_Line(64,127-11*i,174,127-11*i);
    1286:	af eb       	ldi	r26, 0xBF	; 191
    1288:	ca 2e       	mov	r12, r26
    128a:	d1 2c       	mov	r13, r1
    128c:	15 c0       	rjmp	.+42     	; 0x12b8 <PrintBoard+0x4c>
    128e:	80 e4       	ldi	r24, 0x40	; 64
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	be 01       	movw	r22, r28
    1294:	4e ea       	ldi	r20, 0xAE	; 174
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	9e 01       	movw	r18, r28
    129a:	0e 94 a6 02 	call	0x54c	; 0x54c <GLCD_Line>
    129e:	a6 01       	movw	r20, r12
    12a0:	4c 1b       	sub	r20, r28
    12a2:	5d 0b       	sbc	r21, r29
        GLCD_Line(64+11*i,127,64+11*i,17);
    12a4:	ca 01       	movw	r24, r20
    12a6:	6f e7       	ldi	r22, 0x7F	; 127
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	21 e1       	ldi	r18, 0x11	; 17
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	0e 94 a6 02 	call	0x54c	; 0x54c <GLCD_Line>
#define SIZE5Y 8
 
void PrintBoard(int size){
	int i;

	for(i=0;i <=size;i++) {
    12b2:	0f 5f       	subi	r16, 0xFF	; 255
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	2b 97       	sbiw	r28, 0x0b	; 11
    12b8:	e0 16       	cp	r14, r16
    12ba:	f1 06       	cpc	r15, r17
    12bc:	44 f7       	brge	.-48     	; 0x128e <PrintBoard+0x22>
        GLCD_Line(64,127-11*i,174,127-11*i);
        GLCD_Line(64+11*i,127,64+11*i,17);
  	}

}
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	08 95       	ret

000012d0 <MakeShip5>:
#include "ship.h"

#define SIZE5Y 8

void MakeShip5(int arr[][SIZE5Y])
{
    12d0:	6f 92       	push	r6
    12d2:	7f 92       	push	r7
    12d4:	8f 92       	push	r8
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	fc 01       	movw	r30, r24
    12f0:	e0 56       	subi	r30, 0x60	; 96
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	8a e0       	ldi	r24, 0x0A	; 10
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    int i, j;

    for(i=10;i<20;i++)
		arr[i][0]=1;
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	84 2e       	mov	r8, r20
    12fc:	91 2c       	mov	r9, r1
    12fe:	91 82       	std	Z+1, r9	; 0x01
    1300:	80 82       	st	Z, r8

void MakeShip5(int arr[][SIZE5Y])
{
    int i, j;

    for(i=10;i<20;i++)
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	70 96       	adiw	r30, 0x10	; 16
    1306:	84 31       	cpi	r24, 0x14	; 20
    1308:	91 05       	cpc	r25, r1
    130a:	c9 f7       	brne	.-14     	; 0x12fe <MakeShip5+0x2e>
		arr[i][0]=1;
	for(i=23;i<26;i++)
		arr[i][0]=1;
    130c:	de 01       	movw	r26, r28
    130e:	a0 59       	subi	r26, 0x90	; 144
    1310:	be 4f       	sbci	r27, 0xFE	; 254
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	9c 92       	st	X, r9
    1316:	8e 92       	st	-X, r8
    1318:	c0 58       	subi	r28, 0x80	; 128
    131a:	de 4f       	sbci	r29, 0xFE	; 254
    131c:	99 82       	std	Y+1, r9	; 0x01
    131e:	88 82       	st	Y, r8
    1320:	c0 58       	subi	r28, 0x80	; 128
    1322:	d1 40       	sbci	r29, 0x01	; 1
    1324:	30 e9       	ldi	r19, 0x90	; 144
    1326:	63 2e       	mov	r6, r19
    1328:	31 e0       	ldi	r19, 0x01	; 1
    132a:	73 2e       	mov	r7, r19
    132c:	6c 0e       	add	r6, r28
    132e:	7d 1e       	adc	r7, r29
    1330:	f3 01       	movw	r30, r6
    1332:	91 82       	std	Z+1, r9	; 0x01
    1334:	80 82       	st	Z, r8
	arr[9][1]=1;
    1336:	c0 57       	subi	r28, 0x70	; 112
    1338:	df 4f       	sbci	r29, 0xFF	; 255
    133a:	9b 82       	std	Y+3, r9	; 0x03
    133c:	8a 82       	std	Y+2, r8	; 0x02
	arr[20][1]=1;
    133e:	c0 55       	subi	r28, 0x50	; 80
    1340:	df 4f       	sbci	r29, 0xFF	; 255
    1342:	9b 82       	std	Y+3, r9	; 0x03
    1344:	8a 82       	std	Y+2, r8	; 0x02
    1346:	c0 54       	subi	r28, 0x40	; 64
    1348:	d1 40       	sbci	r29, 0x01	; 1
	arr[23][1]=1;
    134a:	13 96       	adiw	r26, 0x03	; 3
    134c:	9c 92       	st	X, r9
    134e:	8e 92       	st	-X, r8
    1350:	12 97       	sbiw	r26, 0x02	; 2
	arr[25][1]=1;
    1352:	93 82       	std	Z+3, r9	; 0x03
    1354:	82 82       	std	Z+2, r8	; 0x02
	arr[28][1]=1;
    1356:	20 ec       	ldi	r18, 0xC0	; 192
    1358:	a2 2e       	mov	r10, r18
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	b2 2e       	mov	r11, r18
    135e:	ac 0e       	add	r10, r28
    1360:	bd 1e       	adc	r11, r29
    1362:	f5 01       	movw	r30, r10
    1364:	93 82       	std	Z+3, r9	; 0x03
    1366:	82 82       	std	Z+2, r8	; 0x02
	arr[29][1]=1;
    1368:	90 ed       	ldi	r25, 0xD0	; 208
    136a:	c9 2e       	mov	r12, r25
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	d9 2e       	mov	r13, r25
    1370:	cc 0e       	add	r12, r28
    1372:	dd 1e       	adc	r13, r29
    1374:	f6 01       	movw	r30, r12
    1376:	93 82       	std	Z+3, r9	; 0x03
    1378:	82 82       	std	Z+2, r8	; 0x02
	arr[32][1]=1;
    137a:	e1 2c       	mov	r14, r1
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	f8 2e       	mov	r15, r24
    1380:	ec 0e       	add	r14, r28
    1382:	fd 1e       	adc	r15, r29
    1384:	f7 01       	movw	r30, r14
    1386:	93 82       	std	Z+3, r9	; 0x03
    1388:	82 82       	std	Z+2, r8	; 0x02
	arr[33][1]=1;
    138a:	8e 01       	movw	r16, r28
    138c:	00 5f       	subi	r16, 0xF0	; 240
    138e:	1d 4f       	sbci	r17, 0xFD	; 253
    1390:	f8 01       	movw	r30, r16
    1392:	93 82       	std	Z+3, r9	; 0x03
    1394:	82 82       	std	Z+2, r8	; 0x02
	arr[36][1]=1;
    1396:	be 01       	movw	r22, r28
    1398:	60 5c       	subi	r22, 0xC0	; 192
    139a:	7d 4f       	sbci	r23, 0xFD	; 253
    139c:	fb 01       	movw	r30, r22
    139e:	93 82       	std	Z+3, r9	; 0x03
    13a0:	82 82       	std	Z+2, r8	; 0x02
	arr[37][1]=1;
    13a2:	ae 01       	movw	r20, r28
    13a4:	40 5b       	subi	r20, 0xB0	; 176
    13a6:	5d 4f       	sbci	r21, 0xFD	; 253
    13a8:	fa 01       	movw	r30, r20
    13aa:	93 82       	std	Z+3, r9	; 0x03
    13ac:	82 82       	std	Z+2, r8	; 0x02
	arr[40][1]=1;
    13ae:	9e 01       	movw	r18, r28
    13b0:	20 58       	subi	r18, 0x80	; 128
    13b2:	3d 4f       	sbci	r19, 0xFD	; 253
    13b4:	f9 01       	movw	r30, r18
    13b6:	93 82       	std	Z+3, r9	; 0x03
    13b8:	82 82       	std	Z+2, r8	; 0x02
	arr[41][1]=1;
    13ba:	ce 01       	movw	r24, r28
    13bc:	80 57       	subi	r24, 0x70	; 112
    13be:	9d 4f       	sbci	r25, 0xFD	; 253
    13c0:	fc 01       	movw	r30, r24
    13c2:	93 82       	std	Z+3, r9	; 0x03
    13c4:	82 82       	std	Z+2, r8	; 0x02
		
	arr[8][2] = 1;
    13c6:	c0 58       	subi	r28, 0x80	; 128
    13c8:	df 4f       	sbci	r29, 0xFF	; 255
    13ca:	9d 82       	std	Y+5, r9	; 0x05
    13cc:	8c 82       	std	Y+4, r8	; 0x04
	arr[21][2] = 1;
    13ce:	c0 53       	subi	r28, 0x30	; 48
    13d0:	df 4f       	sbci	r29, 0xFF	; 255
    13d2:	9d 82       	std	Y+5, r9	; 0x05
    13d4:	8c 82       	std	Y+4, r8	; 0x04
    13d6:	c0 55       	subi	r28, 0x50	; 80
    13d8:	d1 40       	sbci	r29, 0x01	; 1
	arr[23][2] = 1;
    13da:	15 96       	adiw	r26, 0x05	; 5
    13dc:	9c 92       	st	X, r9
    13de:	8e 92       	st	-X, r8
    13e0:	14 97       	sbiw	r26, 0x04	; 4
	arr[25][2] = 1;
    13e2:	f3 01       	movw	r30, r6
    13e4:	95 82       	std	Z+5, r9	; 0x05
    13e6:	84 82       	std	Z+4, r8	; 0x04
	arr[28][2] = 1;
    13e8:	f5 01       	movw	r30, r10
    13ea:	95 82       	std	Z+5, r9	; 0x05
    13ec:	84 82       	std	Z+4, r8	; 0x04
	arr[29][2] = 1;
    13ee:	f6 01       	movw	r30, r12
    13f0:	95 82       	std	Z+5, r9	; 0x05
    13f2:	84 82       	std	Z+4, r8	; 0x04
	arr[32][2] = 1;
    13f4:	f7 01       	movw	r30, r14
    13f6:	95 82       	std	Z+5, r9	; 0x05
    13f8:	84 82       	std	Z+4, r8	; 0x04
	arr[33][2] = 1;
    13fa:	f8 01       	movw	r30, r16
    13fc:	95 82       	std	Z+5, r9	; 0x05
    13fe:	84 82       	std	Z+4, r8	; 0x04
	arr[36][2] = 1;
    1400:	fb 01       	movw	r30, r22
    1402:	95 82       	std	Z+5, r9	; 0x05
    1404:	84 82       	std	Z+4, r8	; 0x04
	arr[37][2] = 1;
    1406:	fa 01       	movw	r30, r20
    1408:	95 82       	std	Z+5, r9	; 0x05
    140a:	84 82       	std	Z+4, r8	; 0x04
	arr[40][2] = 1;
    140c:	f9 01       	movw	r30, r18
    140e:	95 82       	std	Z+5, r9	; 0x05
    1410:	84 82       	std	Z+4, r8	; 0x04
	arr[41][2] = 1;
    1412:	fc 01       	movw	r30, r24
    1414:	95 82       	std	Z+5, r9	; 0x05
    1416:	84 82       	std	Z+4, r8	; 0x04
    1418:	fe 01       	movw	r30, r28
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0

	for(i=0;i<46;i++)
		arr[i][3]=1;
    141e:	21 e0       	ldi	r18, 0x01	; 1
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	37 83       	std	Z+7, r19	; 0x07
    1424:	26 83       	std	Z+6, r18	; 0x06
	arr[36][2] = 1;
	arr[37][2] = 1;
	arr[40][2] = 1;
	arr[41][2] = 1;

	for(i=0;i<46;i++)
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	70 96       	adiw	r30, 0x10	; 16
    142a:	8e 32       	cpi	r24, 0x2E	; 46
    142c:	91 05       	cpc	r25, r1
    142e:	c9 f7       	brne	.-14     	; 0x1422 <MakeShip5+0x152>
		arr[i][3]=1;
	
	arr[1][4]=1;
    1430:	39 8f       	std	Y+25, r19	; 0x19
    1432:	28 8f       	std	Y+24, r18	; 0x18
	arr[44][4]=1;
    1434:	c0 54       	subi	r28, 0x40	; 64
    1436:	dd 4f       	sbci	r29, 0xFD	; 253
    1438:	39 87       	std	Y+9, r19	; 0x09
    143a:	28 87       	std	Y+8, r18	; 0x08
    143c:	c0 5c       	subi	r28, 0xC0	; 192
    143e:	d2 40       	sbci	r29, 0x02	; 2
	
	arr[2][5]=1;
    1440:	3b a7       	std	Y+43, r19	; 0x2b
    1442:	2a a7       	std	Y+42, r18	; 0x2a
	arr[43][5]=1;
    1444:	c0 55       	subi	r28, 0x50	; 80
    1446:	dd 4f       	sbci	r29, 0xFD	; 253
    1448:	3b 87       	std	Y+11, r19	; 0x0b
    144a:	2a 87       	std	Y+10, r18	; 0x0a
    144c:	c0 5b       	subi	r28, 0xB0	; 176
    144e:	d2 40       	sbci	r29, 0x02	; 2
#include "ship.h"

#define SIZE5Y 8

void MakeShip5(int arr[][SIZE5Y])
{
    1450:	9e 01       	movw	r18, r28
    1452:	20 5d       	subi	r18, 0xD0	; 208
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	fe 01       	movw	r30, r28
    1458:	fc 96       	adiw	r30, 0x3c	; 60
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	90 e0       	ldi	r25, 0x00	; 0
	arr[2][5]=1;
	arr[43][5]=1;


	for(i=3;i<43;i++)
		arr[i][6]=1;
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	51 83       	std	Z+1, r21	; 0x01
    1464:	40 83       	st	Z, r20
	
	arr[2][5]=1;
	arr[43][5]=1;


	for(i=3;i<43;i++)
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	70 96       	adiw	r30, 0x10	; 16
    146a:	8b 32       	cpi	r24, 0x2B	; 43
    146c:	91 05       	cpc	r25, r1
    146e:	c9 f7       	brne	.-14     	; 0x1462 <MakeShip5+0x192>
    1470:	f9 01       	movw	r30, r18
    1472:	3e 96       	adiw	r30, 0x0e	; 14
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	90 e0       	ldi	r25, 0x00	; 0
		arr[i][6]=1;
	for(i=3;i<43;i++)
		arr[i][7]=1;
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	31 83       	std	Z+1, r19	; 0x01
    147e:	20 83       	st	Z, r18
	arr[43][5]=1;


	for(i=3;i<43;i++)
		arr[i][6]=1;
	for(i=3;i<43;i++)
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	70 96       	adiw	r30, 0x10	; 16
    1484:	8b 32       	cpi	r24, 0x2B	; 43
    1486:	91 05       	cpc	r25, r1
    1488:	c9 f7       	brne	.-14     	; 0x147c <MakeShip5+0x1ac>
		arr[i][7]=1;

}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	af 90       	pop	r10
    149e:	9f 90       	pop	r9
    14a0:	8f 90       	pop	r8
    14a2:	7f 90       	pop	r7
    14a4:	6f 90       	pop	r6
    14a6:	08 95       	ret

000014a8 <__fixunssfsi>:
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	7b 01       	movw	r14, r22
    14b2:	8c 01       	movw	r16, r24
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	5f e4       	ldi	r21, 0x4F	; 79
    14bc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__gesf2>
    14c0:	88 23       	and	r24, r24
    14c2:	8c f0       	brlt	.+34     	; 0x14e6 <__fixunssfsi+0x3e>
    14c4:	c8 01       	movw	r24, r16
    14c6:	b7 01       	movw	r22, r14
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	5f e4       	ldi	r21, 0x4F	; 79
    14d0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__subsf3>
    14d4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__fixsfsi>
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	20 50       	subi	r18, 0x00	; 0
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	40 40       	sbci	r20, 0x00	; 0
    14e2:	50 48       	sbci	r21, 0x80	; 128
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <__fixunssfsi+0x4a>
    14e6:	c8 01       	movw	r24, r16
    14e8:	b7 01       	movw	r22, r14
    14ea:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__fixsfsi>
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	b9 01       	movw	r22, r18
    14f4:	ca 01       	movw	r24, r20
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	08 95       	ret

00001500 <_fpadd_parts>:
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e6 e8       	ldi	r30, 0x86	; 134
    1506:	fa e0       	ldi	r31, 0x0A	; 10
    1508:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__>
    150c:	dc 01       	movw	r26, r24
    150e:	2b 01       	movw	r4, r22
    1510:	fa 01       	movw	r30, r20
    1512:	9c 91       	ld	r25, X
    1514:	92 30       	cpi	r25, 0x02	; 2
    1516:	08 f4       	brcc	.+2      	; 0x151a <_fpadd_parts+0x1a>
    1518:	39 c1       	rjmp	.+626    	; 0x178c <_fpadd_parts+0x28c>
    151a:	eb 01       	movw	r28, r22
    151c:	88 81       	ld	r24, Y
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	08 f4       	brcc	.+2      	; 0x1524 <_fpadd_parts+0x24>
    1522:	33 c1       	rjmp	.+614    	; 0x178a <_fpadd_parts+0x28a>
    1524:	94 30       	cpi	r25, 0x04	; 4
    1526:	69 f4       	brne	.+26     	; 0x1542 <_fpadd_parts+0x42>
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	09 f0       	breq	.+2      	; 0x152e <_fpadd_parts+0x2e>
    152c:	2f c1       	rjmp	.+606    	; 0x178c <_fpadd_parts+0x28c>
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	9c 91       	ld	r25, X
    1532:	11 97       	sbiw	r26, 0x01	; 1
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	98 17       	cp	r25, r24
    1538:	09 f4       	brne	.+2      	; 0x153c <_fpadd_parts+0x3c>
    153a:	28 c1       	rjmp	.+592    	; 0x178c <_fpadd_parts+0x28c>
    153c:	aa e2       	ldi	r26, 0x2A	; 42
    153e:	b1 e0       	ldi	r27, 0x01	; 1
    1540:	25 c1       	rjmp	.+586    	; 0x178c <_fpadd_parts+0x28c>
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	09 f4       	brne	.+2      	; 0x1548 <_fpadd_parts+0x48>
    1546:	21 c1       	rjmp	.+578    	; 0x178a <_fpadd_parts+0x28a>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	a9 f4       	brne	.+42     	; 0x1576 <_fpadd_parts+0x76>
    154c:	92 30       	cpi	r25, 0x02	; 2
    154e:	09 f0       	breq	.+2      	; 0x1552 <_fpadd_parts+0x52>
    1550:	1d c1       	rjmp	.+570    	; 0x178c <_fpadd_parts+0x28c>
    1552:	9a 01       	movw	r18, r20
    1554:	ad 01       	movw	r20, r26
    1556:	88 e0       	ldi	r24, 0x08	; 8
    1558:	ea 01       	movw	r28, r20
    155a:	09 90       	ld	r0, Y+
    155c:	ae 01       	movw	r20, r28
    155e:	e9 01       	movw	r28, r18
    1560:	09 92       	st	Y+, r0
    1562:	9e 01       	movw	r18, r28
    1564:	81 50       	subi	r24, 0x01	; 1
    1566:	c1 f7       	brne	.-16     	; 0x1558 <_fpadd_parts+0x58>
    1568:	e2 01       	movw	r28, r4
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	9c 91       	ld	r25, X
    1570:	89 23       	and	r24, r25
    1572:	81 83       	std	Z+1, r24	; 0x01
    1574:	08 c1       	rjmp	.+528    	; 0x1786 <_fpadd_parts+0x286>
    1576:	92 30       	cpi	r25, 0x02	; 2
    1578:	09 f4       	brne	.+2      	; 0x157c <_fpadd_parts+0x7c>
    157a:	07 c1       	rjmp	.+526    	; 0x178a <_fpadd_parts+0x28a>
    157c:	12 96       	adiw	r26, 0x02	; 2
    157e:	2d 90       	ld	r2, X+
    1580:	3c 90       	ld	r3, X
    1582:	13 97       	sbiw	r26, 0x03	; 3
    1584:	eb 01       	movw	r28, r22
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	14 96       	adiw	r26, 0x04	; 4
    158c:	ad 90       	ld	r10, X+
    158e:	bd 90       	ld	r11, X+
    1590:	cd 90       	ld	r12, X+
    1592:	dc 90       	ld	r13, X
    1594:	17 97       	sbiw	r26, 0x07	; 7
    1596:	ec 80       	ldd	r14, Y+4	; 0x04
    1598:	fd 80       	ldd	r15, Y+5	; 0x05
    159a:	0e 81       	ldd	r16, Y+6	; 0x06
    159c:	1f 81       	ldd	r17, Y+7	; 0x07
    159e:	91 01       	movw	r18, r2
    15a0:	28 1b       	sub	r18, r24
    15a2:	39 0b       	sbc	r19, r25
    15a4:	b9 01       	movw	r22, r18
    15a6:	37 ff       	sbrs	r19, 7
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <_fpadd_parts+0xb2>
    15aa:	66 27       	eor	r22, r22
    15ac:	77 27       	eor	r23, r23
    15ae:	62 1b       	sub	r22, r18
    15b0:	73 0b       	sbc	r23, r19
    15b2:	60 32       	cpi	r22, 0x20	; 32
    15b4:	71 05       	cpc	r23, r1
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <_fpadd_parts+0xba>
    15b8:	61 c0       	rjmp	.+194    	; 0x167c <_fpadd_parts+0x17c>
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	6c f5       	brge	.+90     	; 0x161a <_fpadd_parts+0x11a>
    15c0:	37 01       	movw	r6, r14
    15c2:	48 01       	movw	r8, r16
    15c4:	06 2e       	mov	r0, r22
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <_fpadd_parts+0xd0>
    15c8:	96 94       	lsr	r9
    15ca:	87 94       	ror	r8
    15cc:	77 94       	ror	r7
    15ce:	67 94       	ror	r6
    15d0:	0a 94       	dec	r0
    15d2:	d2 f7       	brpl	.-12     	; 0x15c8 <_fpadd_parts+0xc8>
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <_fpadd_parts+0xe6>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	6a 95       	dec	r22
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <_fpadd_parts+0xde>
    15ea:	21 50       	subi	r18, 0x01	; 1
    15ec:	30 40       	sbci	r19, 0x00	; 0
    15ee:	40 40       	sbci	r20, 0x00	; 0
    15f0:	50 40       	sbci	r21, 0x00	; 0
    15f2:	2e 21       	and	r18, r14
    15f4:	3f 21       	and	r19, r15
    15f6:	40 23       	and	r20, r16
    15f8:	51 23       	and	r21, r17
    15fa:	21 15       	cp	r18, r1
    15fc:	31 05       	cpc	r19, r1
    15fe:	41 05       	cpc	r20, r1
    1600:	51 05       	cpc	r21, r1
    1602:	21 f0       	breq	.+8      	; 0x160c <_fpadd_parts+0x10c>
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	79 01       	movw	r14, r18
    160e:	8a 01       	movw	r16, r20
    1610:	e6 28       	or	r14, r6
    1612:	f7 28       	or	r15, r7
    1614:	08 29       	or	r16, r8
    1616:	19 29       	or	r17, r9
    1618:	3c c0       	rjmp	.+120    	; 0x1692 <_fpadd_parts+0x192>
    161a:	23 2b       	or	r18, r19
    161c:	d1 f1       	breq	.+116    	; 0x1692 <_fpadd_parts+0x192>
    161e:	26 0e       	add	r2, r22
    1620:	37 1e       	adc	r3, r23
    1622:	35 01       	movw	r6, r10
    1624:	46 01       	movw	r8, r12
    1626:	06 2e       	mov	r0, r22
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <_fpadd_parts+0x132>
    162a:	96 94       	lsr	r9
    162c:	87 94       	ror	r8
    162e:	77 94       	ror	r7
    1630:	67 94       	ror	r6
    1632:	0a 94       	dec	r0
    1634:	d2 f7       	brpl	.-12     	; 0x162a <_fpadd_parts+0x12a>
    1636:	21 e0       	ldi	r18, 0x01	; 1
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <_fpadd_parts+0x148>
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	44 1f       	adc	r20, r20
    1646:	55 1f       	adc	r21, r21
    1648:	6a 95       	dec	r22
    164a:	d2 f7       	brpl	.-12     	; 0x1640 <_fpadd_parts+0x140>
    164c:	21 50       	subi	r18, 0x01	; 1
    164e:	30 40       	sbci	r19, 0x00	; 0
    1650:	40 40       	sbci	r20, 0x00	; 0
    1652:	50 40       	sbci	r21, 0x00	; 0
    1654:	2a 21       	and	r18, r10
    1656:	3b 21       	and	r19, r11
    1658:	4c 21       	and	r20, r12
    165a:	5d 21       	and	r21, r13
    165c:	21 15       	cp	r18, r1
    165e:	31 05       	cpc	r19, r1
    1660:	41 05       	cpc	r20, r1
    1662:	51 05       	cpc	r21, r1
    1664:	21 f0       	breq	.+8      	; 0x166e <_fpadd_parts+0x16e>
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	59 01       	movw	r10, r18
    1670:	6a 01       	movw	r12, r20
    1672:	a6 28       	or	r10, r6
    1674:	b7 28       	or	r11, r7
    1676:	c8 28       	or	r12, r8
    1678:	d9 28       	or	r13, r9
    167a:	0b c0       	rjmp	.+22     	; 0x1692 <_fpadd_parts+0x192>
    167c:	82 15       	cp	r24, r2
    167e:	93 05       	cpc	r25, r3
    1680:	2c f0       	brlt	.+10     	; 0x168c <_fpadd_parts+0x18c>
    1682:	1c 01       	movw	r2, r24
    1684:	aa 24       	eor	r10, r10
    1686:	bb 24       	eor	r11, r11
    1688:	65 01       	movw	r12, r10
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <_fpadd_parts+0x192>
    168c:	ee 24       	eor	r14, r14
    168e:	ff 24       	eor	r15, r15
    1690:	87 01       	movw	r16, r14
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	9c 91       	ld	r25, X
    1696:	d2 01       	movw	r26, r4
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	8c 91       	ld	r24, X
    169c:	98 17       	cp	r25, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <_fpadd_parts+0x1a2>
    16a0:	45 c0       	rjmp	.+138    	; 0x172c <_fpadd_parts+0x22c>
    16a2:	99 23       	and	r25, r25
    16a4:	39 f0       	breq	.+14     	; 0x16b4 <_fpadd_parts+0x1b4>
    16a6:	a8 01       	movw	r20, r16
    16a8:	97 01       	movw	r18, r14
    16aa:	2a 19       	sub	r18, r10
    16ac:	3b 09       	sbc	r19, r11
    16ae:	4c 09       	sbc	r20, r12
    16b0:	5d 09       	sbc	r21, r13
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <_fpadd_parts+0x1c0>
    16b4:	a6 01       	movw	r20, r12
    16b6:	95 01       	movw	r18, r10
    16b8:	2e 19       	sub	r18, r14
    16ba:	3f 09       	sbc	r19, r15
    16bc:	40 0b       	sbc	r20, r16
    16be:	51 0b       	sbc	r21, r17
    16c0:	57 fd       	sbrc	r21, 7
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <_fpadd_parts+0x1d4>
    16c4:	11 82       	std	Z+1, r1	; 0x01
    16c6:	33 82       	std	Z+3, r3	; 0x03
    16c8:	22 82       	std	Z+2, r2	; 0x02
    16ca:	24 83       	std	Z+4, r18	; 0x04
    16cc:	35 83       	std	Z+5, r19	; 0x05
    16ce:	46 83       	std	Z+6, r20	; 0x06
    16d0:	57 83       	std	Z+7, r21	; 0x07
    16d2:	1d c0       	rjmp	.+58     	; 0x170e <_fpadd_parts+0x20e>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	81 83       	std	Z+1, r24	; 0x01
    16d8:	33 82       	std	Z+3, r3	; 0x03
    16da:	22 82       	std	Z+2, r2	; 0x02
    16dc:	88 27       	eor	r24, r24
    16de:	99 27       	eor	r25, r25
    16e0:	dc 01       	movw	r26, r24
    16e2:	82 1b       	sub	r24, r18
    16e4:	93 0b       	sbc	r25, r19
    16e6:	a4 0b       	sbc	r26, r20
    16e8:	b5 0b       	sbc	r27, r21
    16ea:	84 83       	std	Z+4, r24	; 0x04
    16ec:	95 83       	std	Z+5, r25	; 0x05
    16ee:	a6 83       	std	Z+6, r26	; 0x06
    16f0:	b7 83       	std	Z+7, r27	; 0x07
    16f2:	0d c0       	rjmp	.+26     	; 0x170e <_fpadd_parts+0x20e>
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	44 1f       	adc	r20, r20
    16fa:	55 1f       	adc	r21, r21
    16fc:	24 83       	std	Z+4, r18	; 0x04
    16fe:	35 83       	std	Z+5, r19	; 0x05
    1700:	46 83       	std	Z+6, r20	; 0x06
    1702:	57 83       	std	Z+7, r21	; 0x07
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	93 83       	std	Z+3, r25	; 0x03
    170c:	82 83       	std	Z+2, r24	; 0x02
    170e:	24 81       	ldd	r18, Z+4	; 0x04
    1710:	35 81       	ldd	r19, Z+5	; 0x05
    1712:	46 81       	ldd	r20, Z+6	; 0x06
    1714:	57 81       	ldd	r21, Z+7	; 0x07
    1716:	da 01       	movw	r26, r20
    1718:	c9 01       	movw	r24, r18
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	a1 09       	sbc	r26, r1
    171e:	b1 09       	sbc	r27, r1
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	af 4f       	sbci	r26, 0xFF	; 255
    1726:	bf 43       	sbci	r27, 0x3F	; 63
    1728:	28 f3       	brcs	.-54     	; 0x16f4 <_fpadd_parts+0x1f4>
    172a:	0b c0       	rjmp	.+22     	; 0x1742 <_fpadd_parts+0x242>
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	33 82       	std	Z+3, r3	; 0x03
    1730:	22 82       	std	Z+2, r2	; 0x02
    1732:	ea 0c       	add	r14, r10
    1734:	fb 1c       	adc	r15, r11
    1736:	0c 1d       	adc	r16, r12
    1738:	1d 1d       	adc	r17, r13
    173a:	e4 82       	std	Z+4, r14	; 0x04
    173c:	f5 82       	std	Z+5, r15	; 0x05
    173e:	06 83       	std	Z+6, r16	; 0x06
    1740:	17 83       	std	Z+7, r17	; 0x07
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	80 83       	st	Z, r24
    1746:	24 81       	ldd	r18, Z+4	; 0x04
    1748:	35 81       	ldd	r19, Z+5	; 0x05
    174a:	46 81       	ldd	r20, Z+6	; 0x06
    174c:	57 81       	ldd	r21, Z+7	; 0x07
    174e:	57 ff       	sbrs	r21, 7
    1750:	1a c0       	rjmp	.+52     	; 0x1786 <_fpadd_parts+0x286>
    1752:	c9 01       	movw	r24, r18
    1754:	aa 27       	eor	r26, r26
    1756:	97 fd       	sbrc	r25, 7
    1758:	a0 95       	com	r26
    175a:	ba 2f       	mov	r27, r26
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	a0 70       	andi	r26, 0x00	; 0
    1762:	b0 70       	andi	r27, 0x00	; 0
    1764:	56 95       	lsr	r21
    1766:	47 95       	ror	r20
    1768:	37 95       	ror	r19
    176a:	27 95       	ror	r18
    176c:	82 2b       	or	r24, r18
    176e:	93 2b       	or	r25, r19
    1770:	a4 2b       	or	r26, r20
    1772:	b5 2b       	or	r27, r21
    1774:	84 83       	std	Z+4, r24	; 0x04
    1776:	95 83       	std	Z+5, r25	; 0x05
    1778:	a6 83       	std	Z+6, r26	; 0x06
    177a:	b7 83       	std	Z+7, r27	; 0x07
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	df 01       	movw	r26, r30
    1788:	01 c0       	rjmp	.+2      	; 0x178c <_fpadd_parts+0x28c>
    178a:	d2 01       	movw	r26, r4
    178c:	cd 01       	movw	r24, r26
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	e2 e1       	ldi	r30, 0x12	; 18
    1794:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__>

00001798 <__subsf3>:
    1798:	a0 e2       	ldi	r26, 0x20	; 32
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e2 ed       	ldi	r30, 0xD2	; 210
    179e:	fb e0       	ldi	r31, 0x0B	; 11
    17a0:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    17a4:	69 83       	std	Y+1, r22	; 0x01
    17a6:	7a 83       	std	Y+2, r23	; 0x02
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	9c 83       	std	Y+4, r25	; 0x04
    17ac:	2d 83       	std	Y+5, r18	; 0x05
    17ae:	3e 83       	std	Y+6, r19	; 0x06
    17b0:	4f 83       	std	Y+7, r20	; 0x07
    17b2:	58 87       	std	Y+8, r21	; 0x08
    17b4:	e9 e0       	ldi	r30, 0x09	; 9
    17b6:	ee 2e       	mov	r14, r30
    17b8:	f1 2c       	mov	r15, r1
    17ba:	ec 0e       	add	r14, r28
    17bc:	fd 1e       	adc	r15, r29
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	b7 01       	movw	r22, r14
    17c4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    17c8:	8e 01       	movw	r16, r28
    17ca:	0f 5e       	subi	r16, 0xEF	; 239
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	ce 01       	movw	r24, r28
    17d0:	05 96       	adiw	r24, 0x05	; 5
    17d2:	b8 01       	movw	r22, r16
    17d4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    17d8:	8a 89       	ldd	r24, Y+18	; 0x12
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	89 27       	eor	r24, r25
    17de:	8a 8b       	std	Y+18, r24	; 0x12
    17e0:	c7 01       	movw	r24, r14
    17e2:	b8 01       	movw	r22, r16
    17e4:	ae 01       	movw	r20, r28
    17e6:	47 5e       	subi	r20, 0xE7	; 231
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	0e 94 80 0a 	call	0x1500	; 0x1500 <_fpadd_parts>
    17ee:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__pack_f>
    17f2:	a0 96       	adiw	r28, 0x20	; 32
    17f4:	e6 e0       	ldi	r30, 0x06	; 6
    17f6:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

000017fa <__addsf3>:
    17fa:	a0 e2       	ldi	r26, 0x20	; 32
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e3 e0       	ldi	r30, 0x03	; 3
    1800:	fc e0       	ldi	r31, 0x0C	; 12
    1802:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1806:	69 83       	std	Y+1, r22	; 0x01
    1808:	7a 83       	std	Y+2, r23	; 0x02
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	2d 83       	std	Y+5, r18	; 0x05
    1810:	3e 83       	std	Y+6, r19	; 0x06
    1812:	4f 83       	std	Y+7, r20	; 0x07
    1814:	58 87       	std	Y+8, r21	; 0x08
    1816:	f9 e0       	ldi	r31, 0x09	; 9
    1818:	ef 2e       	mov	r14, r31
    181a:	f1 2c       	mov	r15, r1
    181c:	ec 0e       	add	r14, r28
    181e:	fd 1e       	adc	r15, r29
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	b7 01       	movw	r22, r14
    1826:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    182a:	8e 01       	movw	r16, r28
    182c:	0f 5e       	subi	r16, 0xEF	; 239
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	ce 01       	movw	r24, r28
    1832:	05 96       	adiw	r24, 0x05	; 5
    1834:	b8 01       	movw	r22, r16
    1836:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    183a:	c7 01       	movw	r24, r14
    183c:	b8 01       	movw	r22, r16
    183e:	ae 01       	movw	r20, r28
    1840:	47 5e       	subi	r20, 0xE7	; 231
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	0e 94 80 0a 	call	0x1500	; 0x1500 <_fpadd_parts>
    1848:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__pack_f>
    184c:	a0 96       	adiw	r28, 0x20	; 32
    184e:	e6 e0       	ldi	r30, 0x06	; 6
    1850:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001854 <__mulsf3>:
    1854:	a0 e2       	ldi	r26, 0x20	; 32
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e0 e3       	ldi	r30, 0x30	; 48
    185a:	fc e0       	ldi	r31, 0x0C	; 12
    185c:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__>
    1860:	69 83       	std	Y+1, r22	; 0x01
    1862:	7a 83       	std	Y+2, r23	; 0x02
    1864:	8b 83       	std	Y+3, r24	; 0x03
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	2d 83       	std	Y+5, r18	; 0x05
    186a:	3e 83       	std	Y+6, r19	; 0x06
    186c:	4f 83       	std	Y+7, r20	; 0x07
    186e:	58 87       	std	Y+8, r21	; 0x08
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	be 01       	movw	r22, r28
    1876:	67 5f       	subi	r22, 0xF7	; 247
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    187e:	ce 01       	movw	r24, r28
    1880:	05 96       	adiw	r24, 0x05	; 5
    1882:	be 01       	movw	r22, r28
    1884:	6f 5e       	subi	r22, 0xEF	; 239
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    188c:	99 85       	ldd	r25, Y+9	; 0x09
    188e:	92 30       	cpi	r25, 0x02	; 2
    1890:	88 f0       	brcs	.+34     	; 0x18b4 <__mulsf3+0x60>
    1892:	89 89       	ldd	r24, Y+17	; 0x11
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	c8 f0       	brcs	.+50     	; 0x18ca <__mulsf3+0x76>
    1898:	94 30       	cpi	r25, 0x04	; 4
    189a:	19 f4       	brne	.+6      	; 0x18a2 <__mulsf3+0x4e>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	51 f4       	brne	.+20     	; 0x18b4 <__mulsf3+0x60>
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__mulsf3+0x56>
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <__mulsf3+0x5c>
    18a6:	92 30       	cpi	r25, 0x02	; 2
    18a8:	81 f4       	brne	.+32     	; 0x18ca <__mulsf3+0x76>
    18aa:	8a e2       	ldi	r24, 0x2A	; 42
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	c6 c0       	rjmp	.+396    	; 0x1a3c <__mulsf3+0x1e8>
    18b0:	92 30       	cpi	r25, 0x02	; 2
    18b2:	49 f4       	brne	.+18     	; 0x18c6 <__mulsf3+0x72>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	8a 89       	ldd	r24, Y+18	; 0x12
    18ba:	98 13       	cpse	r25, r24
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	2a 87       	std	Y+10, r18	; 0x0a
    18c0:	ce 01       	movw	r24, r28
    18c2:	09 96       	adiw	r24, 0x09	; 9
    18c4:	bb c0       	rjmp	.+374    	; 0x1a3c <__mulsf3+0x1e8>
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	49 f4       	brne	.+18     	; 0x18dc <__mulsf3+0x88>
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	8a 89       	ldd	r24, Y+18	; 0x12
    18d0:	98 13       	cpse	r25, r24
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	2a 8b       	std	Y+18, r18	; 0x12
    18d6:	ce 01       	movw	r24, r28
    18d8:	41 96       	adiw	r24, 0x11	; 17
    18da:	b0 c0       	rjmp	.+352    	; 0x1a3c <__mulsf3+0x1e8>
    18dc:	2d 84       	ldd	r2, Y+13	; 0x0d
    18de:	3e 84       	ldd	r3, Y+14	; 0x0e
    18e0:	4f 84       	ldd	r4, Y+15	; 0x0f
    18e2:	58 88       	ldd	r5, Y+16	; 0x10
    18e4:	6d 88       	ldd	r6, Y+21	; 0x15
    18e6:	7e 88       	ldd	r7, Y+22	; 0x16
    18e8:	8f 88       	ldd	r8, Y+23	; 0x17
    18ea:	98 8c       	ldd	r9, Y+24	; 0x18
    18ec:	ee 24       	eor	r14, r14
    18ee:	ff 24       	eor	r15, r15
    18f0:	87 01       	movw	r16, r14
    18f2:	aa 24       	eor	r10, r10
    18f4:	bb 24       	eor	r11, r11
    18f6:	65 01       	movw	r12, r10
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	e0 e0       	ldi	r30, 0x00	; 0
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	c1 01       	movw	r24, r2
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	89 2b       	or	r24, r25
    190c:	e9 f0       	breq	.+58     	; 0x1948 <__mulsf3+0xf4>
    190e:	e6 0c       	add	r14, r6
    1910:	f7 1c       	adc	r15, r7
    1912:	08 1d       	adc	r16, r8
    1914:	19 1d       	adc	r17, r9
    1916:	9a 01       	movw	r18, r20
    1918:	ab 01       	movw	r20, r22
    191a:	2a 0d       	add	r18, r10
    191c:	3b 1d       	adc	r19, r11
    191e:	4c 1d       	adc	r20, r12
    1920:	5d 1d       	adc	r21, r13
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e6 14       	cp	r14, r6
    192c:	f7 04       	cpc	r15, r7
    192e:	08 05       	cpc	r16, r8
    1930:	19 05       	cpc	r17, r9
    1932:	20 f4       	brcc	.+8      	; 0x193c <__mulsf3+0xe8>
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 e0       	ldi	r26, 0x00	; 0
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ba 01       	movw	r22, r20
    193e:	a9 01       	movw	r20, r18
    1940:	48 0f       	add	r20, r24
    1942:	59 1f       	adc	r21, r25
    1944:	6a 1f       	adc	r22, r26
    1946:	7b 1f       	adc	r23, r27
    1948:	aa 0c       	add	r10, r10
    194a:	bb 1c       	adc	r11, r11
    194c:	cc 1c       	adc	r12, r12
    194e:	dd 1c       	adc	r13, r13
    1950:	97 fe       	sbrs	r9, 7
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <__mulsf3+0x110>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	a8 2a       	or	r10, r24
    195e:	b9 2a       	or	r11, r25
    1960:	ca 2a       	or	r12, r26
    1962:	db 2a       	or	r13, r27
    1964:	31 96       	adiw	r30, 0x01	; 1
    1966:	e0 32       	cpi	r30, 0x20	; 32
    1968:	f1 05       	cpc	r31, r1
    196a:	49 f0       	breq	.+18     	; 0x197e <__mulsf3+0x12a>
    196c:	66 0c       	add	r6, r6
    196e:	77 1c       	adc	r7, r7
    1970:	88 1c       	adc	r8, r8
    1972:	99 1c       	adc	r9, r9
    1974:	56 94       	lsr	r5
    1976:	47 94       	ror	r4
    1978:	37 94       	ror	r3
    197a:	27 94       	ror	r2
    197c:	c3 cf       	rjmp	.-122    	; 0x1904 <__mulsf3+0xb0>
    197e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1980:	ea 89       	ldd	r30, Y+18	; 0x12
    1982:	2b 89       	ldd	r18, Y+19	; 0x13
    1984:	3c 89       	ldd	r19, Y+20	; 0x14
    1986:	8b 85       	ldd	r24, Y+11	; 0x0b
    1988:	9c 85       	ldd	r25, Y+12	; 0x0c
    198a:	28 0f       	add	r18, r24
    198c:	39 1f       	adc	r19, r25
    198e:	2e 5f       	subi	r18, 0xFE	; 254
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	17 c0       	rjmp	.+46     	; 0x19c2 <__mulsf3+0x16e>
    1994:	ca 01       	movw	r24, r20
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	89 2b       	or	r24, r25
    199c:	61 f0       	breq	.+24     	; 0x19b6 <__mulsf3+0x162>
    199e:	16 95       	lsr	r17
    19a0:	07 95       	ror	r16
    19a2:	f7 94       	ror	r15
    19a4:	e7 94       	ror	r14
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e8       	ldi	r27, 0x80	; 128
    19ae:	e8 2a       	or	r14, r24
    19b0:	f9 2a       	or	r15, r25
    19b2:	0a 2b       	or	r16, r26
    19b4:	1b 2b       	or	r17, r27
    19b6:	76 95       	lsr	r23
    19b8:	67 95       	ror	r22
    19ba:	57 95       	ror	r21
    19bc:	47 95       	ror	r20
    19be:	2f 5f       	subi	r18, 0xFF	; 255
    19c0:	3f 4f       	sbci	r19, 0xFF	; 255
    19c2:	77 fd       	sbrc	r23, 7
    19c4:	e7 cf       	rjmp	.-50     	; 0x1994 <__mulsf3+0x140>
    19c6:	0c c0       	rjmp	.+24     	; 0x19e0 <__mulsf3+0x18c>
    19c8:	44 0f       	add	r20, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	66 1f       	adc	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	17 fd       	sbrc	r17, 7
    19d2:	41 60       	ori	r20, 0x01	; 1
    19d4:	ee 0c       	add	r14, r14
    19d6:	ff 1c       	adc	r15, r15
    19d8:	00 1f       	adc	r16, r16
    19da:	11 1f       	adc	r17, r17
    19dc:	21 50       	subi	r18, 0x01	; 1
    19de:	30 40       	sbci	r19, 0x00	; 0
    19e0:	40 30       	cpi	r20, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	59 07       	cpc	r21, r25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	69 07       	cpc	r22, r25
    19ea:	90 e4       	ldi	r25, 0x40	; 64
    19ec:	79 07       	cpc	r23, r25
    19ee:	60 f3       	brcs	.-40     	; 0x19c8 <__mulsf3+0x174>
    19f0:	2b 8f       	std	Y+27, r18	; 0x1b
    19f2:	3c 8f       	std	Y+28, r19	; 0x1c
    19f4:	db 01       	movw	r26, r22
    19f6:	ca 01       	movw	r24, r20
    19f8:	8f 77       	andi	r24, 0x7F	; 127
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	a0 70       	andi	r26, 0x00	; 0
    19fe:	b0 70       	andi	r27, 0x00	; 0
    1a00:	80 34       	cpi	r24, 0x40	; 64
    1a02:	91 05       	cpc	r25, r1
    1a04:	a1 05       	cpc	r26, r1
    1a06:	b1 05       	cpc	r27, r1
    1a08:	61 f4       	brne	.+24     	; 0x1a22 <__mulsf3+0x1ce>
    1a0a:	47 fd       	sbrc	r20, 7
    1a0c:	0a c0       	rjmp	.+20     	; 0x1a22 <__mulsf3+0x1ce>
    1a0e:	e1 14       	cp	r14, r1
    1a10:	f1 04       	cpc	r15, r1
    1a12:	01 05       	cpc	r16, r1
    1a14:	11 05       	cpc	r17, r1
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <__mulsf3+0x1ce>
    1a18:	40 5c       	subi	r20, 0xC0	; 192
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	6f 4f       	sbci	r22, 0xFF	; 255
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	40 78       	andi	r20, 0x80	; 128
    1a22:	1a 8e       	std	Y+26, r1	; 0x1a
    1a24:	fe 17       	cp	r31, r30
    1a26:	11 f0       	breq	.+4      	; 0x1a2c <__mulsf3+0x1d8>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8a 8f       	std	Y+26, r24	; 0x1a
    1a2c:	4d 8f       	std	Y+29, r20	; 0x1d
    1a2e:	5e 8f       	std	Y+30, r21	; 0x1e
    1a30:	6f 8f       	std	Y+31, r22	; 0x1f
    1a32:	78 a3       	std	Y+32, r23	; 0x20
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    1a38:	ce 01       	movw	r24, r28
    1a3a:	49 96       	adiw	r24, 0x19	; 25
    1a3c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__pack_f>
    1a40:	a0 96       	adiw	r28, 0x20	; 32
    1a42:	e2 e1       	ldi	r30, 0x12	; 18
    1a44:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__>

00001a48 <__gtsf2>:
    1a48:	a8 e1       	ldi	r26, 0x18	; 24
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ea e2       	ldi	r30, 0x2A	; 42
    1a4e:	fd e0       	ldi	r31, 0x0D	; 13
    1a50:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1a54:	69 83       	std	Y+1, r22	; 0x01
    1a56:	7a 83       	std	Y+2, r23	; 0x02
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	9c 83       	std	Y+4, r25	; 0x04
    1a5c:	2d 83       	std	Y+5, r18	; 0x05
    1a5e:	3e 83       	std	Y+6, r19	; 0x06
    1a60:	4f 83       	std	Y+7, r20	; 0x07
    1a62:	58 87       	std	Y+8, r21	; 0x08
    1a64:	89 e0       	ldi	r24, 0x09	; 9
    1a66:	e8 2e       	mov	r14, r24
    1a68:	f1 2c       	mov	r15, r1
    1a6a:	ec 0e       	add	r14, r28
    1a6c:	fd 1e       	adc	r15, r29
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	b7 01       	movw	r22, r14
    1a74:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1a78:	8e 01       	movw	r16, r28
    1a7a:	0f 5e       	subi	r16, 0xEF	; 239
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	ce 01       	movw	r24, r28
    1a80:	05 96       	adiw	r24, 0x05	; 5
    1a82:	b8 01       	movw	r22, r16
    1a84:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	40 f0       	brcs	.+16     	; 0x1a9e <__gtsf2+0x56>
    1a8e:	89 89       	ldd	r24, Y+17	; 0x11
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	28 f0       	brcs	.+10     	; 0x1a9e <__gtsf2+0x56>
    1a94:	c7 01       	movw	r24, r14
    1a96:	b8 01       	movw	r22, r16
    1a98:	0e 94 02 10 	call	0x2004	; 0x2004 <__fpcmp_parts_f>
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <__gtsf2+0x58>
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	68 96       	adiw	r28, 0x18	; 24
    1aa2:	e6 e0       	ldi	r30, 0x06	; 6
    1aa4:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001aa8 <__gesf2>:
    1aa8:	a8 e1       	ldi	r26, 0x18	; 24
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e5       	ldi	r30, 0x5A	; 90
    1aae:	fd e0       	ldi	r31, 0x0D	; 13
    1ab0:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1ab4:	69 83       	std	Y+1, r22	; 0x01
    1ab6:	7a 83       	std	Y+2, r23	; 0x02
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	2d 83       	std	Y+5, r18	; 0x05
    1abe:	3e 83       	std	Y+6, r19	; 0x06
    1ac0:	4f 83       	std	Y+7, r20	; 0x07
    1ac2:	58 87       	std	Y+8, r21	; 0x08
    1ac4:	89 e0       	ldi	r24, 0x09	; 9
    1ac6:	e8 2e       	mov	r14, r24
    1ac8:	f1 2c       	mov	r15, r1
    1aca:	ec 0e       	add	r14, r28
    1acc:	fd 1e       	adc	r15, r29
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1ad8:	8e 01       	movw	r16, r28
    1ada:	0f 5e       	subi	r16, 0xEF	; 239
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	ce 01       	movw	r24, r28
    1ae0:	05 96       	adiw	r24, 0x05	; 5
    1ae2:	b8 01       	movw	r22, r16
    1ae4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	40 f0       	brcs	.+16     	; 0x1afe <__gesf2+0x56>
    1aee:	89 89       	ldd	r24, Y+17	; 0x11
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	28 f0       	brcs	.+10     	; 0x1afe <__gesf2+0x56>
    1af4:	c7 01       	movw	r24, r14
    1af6:	b8 01       	movw	r22, r16
    1af8:	0e 94 02 10 	call	0x2004	; 0x2004 <__fpcmp_parts_f>
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <__gesf2+0x58>
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	68 96       	adiw	r28, 0x18	; 24
    1b02:	e6 e0       	ldi	r30, 0x06	; 6
    1b04:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001b08 <__ltsf2>:
    1b08:	a8 e1       	ldi	r26, 0x18	; 24
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e8       	ldi	r30, 0x8A	; 138
    1b0e:	fd e0       	ldi	r31, 0x0D	; 13
    1b10:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1b14:	69 83       	std	Y+1, r22	; 0x01
    1b16:	7a 83       	std	Y+2, r23	; 0x02
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	2d 83       	std	Y+5, r18	; 0x05
    1b1e:	3e 83       	std	Y+6, r19	; 0x06
    1b20:	4f 83       	std	Y+7, r20	; 0x07
    1b22:	58 87       	std	Y+8, r21	; 0x08
    1b24:	89 e0       	ldi	r24, 0x09	; 9
    1b26:	e8 2e       	mov	r14, r24
    1b28:	f1 2c       	mov	r15, r1
    1b2a:	ec 0e       	add	r14, r28
    1b2c:	fd 1e       	adc	r15, r29
    1b2e:	ce 01       	movw	r24, r28
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	b7 01       	movw	r22, r14
    1b34:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1b38:	8e 01       	movw	r16, r28
    1b3a:	0f 5e       	subi	r16, 0xEF	; 239
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	ce 01       	movw	r24, r28
    1b40:	05 96       	adiw	r24, 0x05	; 5
    1b42:	b8 01       	movw	r22, r16
    1b44:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	40 f0       	brcs	.+16     	; 0x1b5e <__ltsf2+0x56>
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	28 f0       	brcs	.+10     	; 0x1b5e <__ltsf2+0x56>
    1b54:	c7 01       	movw	r24, r14
    1b56:	b8 01       	movw	r22, r16
    1b58:	0e 94 02 10 	call	0x2004	; 0x2004 <__fpcmp_parts_f>
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <__ltsf2+0x58>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	68 96       	adiw	r28, 0x18	; 24
    1b62:	e6 e0       	ldi	r30, 0x06	; 6
    1b64:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001b68 <__floatsisf>:
    1b68:	a8 e0       	ldi	r26, 0x08	; 8
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	ea eb       	ldi	r30, 0xBA	; 186
    1b6e:	fd e0       	ldi	r31, 0x0D	; 13
    1b70:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__+0x12>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	da 01       	movw	r26, r20
    1b7e:	c9 01       	movw	r24, r18
    1b80:	88 27       	eor	r24, r24
    1b82:	b7 fd       	sbrc	r27, 7
    1b84:	83 95       	inc	r24
    1b86:	99 27       	eor	r25, r25
    1b88:	aa 27       	eor	r26, r26
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	b8 2e       	mov	r11, r24
    1b8e:	21 15       	cp	r18, r1
    1b90:	31 05       	cpc	r19, r1
    1b92:	41 05       	cpc	r20, r1
    1b94:	51 05       	cpc	r21, r1
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <__floatsisf+0x36>
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	3a c0       	rjmp	.+116    	; 0x1c12 <__floatsisf+0xaa>
    1b9e:	88 23       	and	r24, r24
    1ba0:	a9 f0       	breq	.+42     	; 0x1bcc <__floatsisf+0x64>
    1ba2:	20 30       	cpi	r18, 0x00	; 0
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	38 07       	cpc	r19, r24
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	48 07       	cpc	r20, r24
    1bac:	80 e8       	ldi	r24, 0x80	; 128
    1bae:	58 07       	cpc	r21, r24
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <__floatsisf+0x54>
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	9f ec       	ldi	r25, 0xCF	; 207
    1bba:	30 c0       	rjmp	.+96     	; 0x1c1c <__floatsisf+0xb4>
    1bbc:	ee 24       	eor	r14, r14
    1bbe:	ff 24       	eor	r15, r15
    1bc0:	87 01       	movw	r16, r14
    1bc2:	e2 1a       	sub	r14, r18
    1bc4:	f3 0a       	sbc	r15, r19
    1bc6:	04 0b       	sbc	r16, r20
    1bc8:	15 0b       	sbc	r17, r21
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <__floatsisf+0x68>
    1bcc:	79 01       	movw	r14, r18
    1bce:	8a 01       	movw	r16, r20
    1bd0:	8e e1       	ldi	r24, 0x1E	; 30
    1bd2:	c8 2e       	mov	r12, r24
    1bd4:	d1 2c       	mov	r13, r1
    1bd6:	dc 82       	std	Y+4, r13	; 0x04
    1bd8:	cb 82       	std	Y+3, r12	; 0x03
    1bda:	ed 82       	std	Y+5, r14	; 0x05
    1bdc:	fe 82       	std	Y+6, r15	; 0x06
    1bde:	0f 83       	std	Y+7, r16	; 0x07
    1be0:	18 87       	std	Y+8, r17	; 0x08
    1be2:	c8 01       	movw	r24, r16
    1be4:	b7 01       	movw	r22, r14
    1be6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__clzsi2>
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	18 16       	cp	r1, r24
    1bee:	19 06       	cpc	r1, r25
    1bf0:	84 f4       	brge	.+32     	; 0x1c12 <__floatsisf+0xaa>
    1bf2:	08 2e       	mov	r0, r24
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <__floatsisf+0x96>
    1bf6:	ee 0c       	add	r14, r14
    1bf8:	ff 1c       	adc	r15, r15
    1bfa:	00 1f       	adc	r16, r16
    1bfc:	11 1f       	adc	r17, r17
    1bfe:	0a 94       	dec	r0
    1c00:	d2 f7       	brpl	.-12     	; 0x1bf6 <__floatsisf+0x8e>
    1c02:	ed 82       	std	Y+5, r14	; 0x05
    1c04:	fe 82       	std	Y+6, r15	; 0x06
    1c06:	0f 83       	std	Y+7, r16	; 0x07
    1c08:	18 87       	std	Y+8, r17	; 0x08
    1c0a:	c8 1a       	sub	r12, r24
    1c0c:	d9 0a       	sbc	r13, r25
    1c0e:	dc 82       	std	Y+4, r13	; 0x04
    1c10:	cb 82       	std	Y+3, r12	; 0x03
    1c12:	ba 82       	std	Y+2, r11	; 0x02
    1c14:	ce 01       	movw	r24, r28
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__pack_f>
    1c1c:	28 96       	adiw	r28, 0x08	; 8
    1c1e:	e9 e0       	ldi	r30, 0x09	; 9
    1c20:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__+0x12>

00001c24 <__fixsfsi>:
    1c24:	ac e0       	ldi	r26, 0x0C	; 12
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e1       	ldi	r30, 0x18	; 24
    1c2a:	fe e0       	ldi	r31, 0x0E	; 14
    1c2c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x20>
    1c30:	69 83       	std	Y+1, r22	; 0x01
    1c32:	7a 83       	std	Y+2, r23	; 0x02
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	be 01       	movw	r22, r28
    1c3e:	6b 5f       	subi	r22, 0xFB	; 251
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <__unpack_f>
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	61 f1       	breq	.+88     	; 0x1ca4 <__fixsfsi+0x80>
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	50 f1       	brcs	.+84     	; 0x1ca4 <__fixsfsi+0x80>
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	21 f4       	brne	.+8      	; 0x1c5c <__fixsfsi+0x38>
    1c54:	8e 81       	ldd	r24, Y+6	; 0x06
    1c56:	88 23       	and	r24, r24
    1c58:	51 f1       	breq	.+84     	; 0x1cae <__fixsfsi+0x8a>
    1c5a:	2e c0       	rjmp	.+92     	; 0x1cb8 <__fixsfsi+0x94>
    1c5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c5e:	38 85       	ldd	r19, Y+8	; 0x08
    1c60:	37 fd       	sbrc	r19, 7
    1c62:	20 c0       	rjmp	.+64     	; 0x1ca4 <__fixsfsi+0x80>
    1c64:	6e 81       	ldd	r22, Y+6	; 0x06
    1c66:	2f 31       	cpi	r18, 0x1F	; 31
    1c68:	31 05       	cpc	r19, r1
    1c6a:	1c f0       	brlt	.+6      	; 0x1c72 <__fixsfsi+0x4e>
    1c6c:	66 23       	and	r22, r22
    1c6e:	f9 f0       	breq	.+62     	; 0x1cae <__fixsfsi+0x8a>
    1c70:	23 c0       	rjmp	.+70     	; 0x1cb8 <__fixsfsi+0x94>
    1c72:	8e e1       	ldi	r24, 0x1E	; 30
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	82 1b       	sub	r24, r18
    1c78:	93 0b       	sbc	r25, r19
    1c7a:	29 85       	ldd	r18, Y+9	; 0x09
    1c7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c80:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__fixsfsi+0x68>
    1c84:	56 95       	lsr	r21
    1c86:	47 95       	ror	r20
    1c88:	37 95       	ror	r19
    1c8a:	27 95       	ror	r18
    1c8c:	8a 95       	dec	r24
    1c8e:	d2 f7       	brpl	.-12     	; 0x1c84 <__fixsfsi+0x60>
    1c90:	66 23       	and	r22, r22
    1c92:	b1 f0       	breq	.+44     	; 0x1cc0 <__fixsfsi+0x9c>
    1c94:	50 95       	com	r21
    1c96:	40 95       	com	r20
    1c98:	30 95       	com	r19
    1c9a:	21 95       	neg	r18
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <__fixsfsi+0x9c>
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <__fixsfsi+0x9c>
    1cae:	2f ef       	ldi	r18, 0xFF	; 255
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f ef       	ldi	r20, 0xFF	; 255
    1cb4:	5f e7       	ldi	r21, 0x7F	; 127
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <__fixsfsi+0x9c>
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e8       	ldi	r21, 0x80	; 128
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	2c 96       	adiw	r28, 0x0c	; 12
    1cc6:	e2 e0       	ldi	r30, 0x02	; 2
    1cc8:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x20>

00001ccc <__clzsi2>:
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	7b 01       	movw	r14, r22
    1cd6:	8c 01       	movw	r16, r24
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	e8 16       	cp	r14, r24
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	f8 06       	cpc	r15, r24
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	08 07       	cpc	r16, r24
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	18 07       	cpc	r17, r24
    1ce8:	88 f4       	brcc	.+34     	; 0x1d0c <__clzsi2+0x40>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	e8 16       	cp	r14, r24
    1cee:	f1 04       	cpc	r15, r1
    1cf0:	01 05       	cpc	r16, r1
    1cf2:	11 05       	cpc	r17, r1
    1cf4:	31 f0       	breq	.+12     	; 0x1d02 <__clzsi2+0x36>
    1cf6:	28 f0       	brcs	.+10     	; 0x1d02 <__clzsi2+0x36>
    1cf8:	88 e0       	ldi	r24, 0x08	; 8
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e0       	ldi	r26, 0x00	; 0
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	17 c0       	rjmp	.+46     	; 0x1d30 <__clzsi2+0x64>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	12 c0       	rjmp	.+36     	; 0x1d30 <__clzsi2+0x64>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	e8 16       	cp	r14, r24
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	f8 06       	cpc	r15, r24
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	08 07       	cpc	r16, r24
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	18 07       	cpc	r17, r24
    1d1c:	28 f0       	brcs	.+10     	; 0x1d28 <__clzsi2+0x5c>
    1d1e:	88 e1       	ldi	r24, 0x18	; 24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e0       	ldi	r26, 0x00	; 0
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <__clzsi2+0x64>
    1d28:	80 e1       	ldi	r24, 0x10	; 16
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e0       	ldi	r26, 0x00	; 0
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	20 e2       	ldi	r18, 0x20	; 32
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	28 1b       	sub	r18, r24
    1d3a:	39 0b       	sbc	r19, r25
    1d3c:	4a 0b       	sbc	r20, r26
    1d3e:	5b 0b       	sbc	r21, r27
    1d40:	04 c0       	rjmp	.+8      	; 0x1d4a <__clzsi2+0x7e>
    1d42:	16 95       	lsr	r17
    1d44:	07 95       	ror	r16
    1d46:	f7 94       	ror	r15
    1d48:	e7 94       	ror	r14
    1d4a:	8a 95       	dec	r24
    1d4c:	d2 f7       	brpl	.-12     	; 0x1d42 <__clzsi2+0x76>
    1d4e:	f7 01       	movw	r30, r14
    1d50:	ee 5c       	subi	r30, 0xCE	; 206
    1d52:	fe 4f       	sbci	r31, 0xFE	; 254
    1d54:	80 81       	ld	r24, Z
    1d56:	28 1b       	sub	r18, r24
    1d58:	31 09       	sbc	r19, r1
    1d5a:	41 09       	sbc	r20, r1
    1d5c:	51 09       	sbc	r21, r1
    1d5e:	c9 01       	movw	r24, r18
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	08 95       	ret

00001d6a <__pack_f>:
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	fc 01       	movw	r30, r24
    1d76:	e4 80       	ldd	r14, Z+4	; 0x04
    1d78:	f5 80       	ldd	r15, Z+5	; 0x05
    1d7a:	06 81       	ldd	r16, Z+6	; 0x06
    1d7c:	17 81       	ldd	r17, Z+7	; 0x07
    1d7e:	d1 80       	ldd	r13, Z+1	; 0x01
    1d80:	80 81       	ld	r24, Z
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	48 f4       	brcc	.+18     	; 0x1d98 <__pack_f+0x2e>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e1       	ldi	r26, 0x10	; 16
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e8 2a       	or	r14, r24
    1d90:	f9 2a       	or	r15, r25
    1d92:	0a 2b       	or	r16, r26
    1d94:	1b 2b       	or	r17, r27
    1d96:	a5 c0       	rjmp	.+330    	; 0x1ee2 <__pack_f+0x178>
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__pack_f+0x34>
    1d9c:	9f c0       	rjmp	.+318    	; 0x1edc <__pack_f+0x172>
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	21 f4       	brne	.+8      	; 0x1daa <__pack_f+0x40>
    1da2:	ee 24       	eor	r14, r14
    1da4:	ff 24       	eor	r15, r15
    1da6:	87 01       	movw	r16, r14
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <__pack_f+0x4a>
    1daa:	e1 14       	cp	r14, r1
    1dac:	f1 04       	cpc	r15, r1
    1dae:	01 05       	cpc	r16, r1
    1db0:	11 05       	cpc	r17, r1
    1db2:	19 f4       	brne	.+6      	; 0x1dba <__pack_f+0x50>
    1db4:	e0 e0       	ldi	r30, 0x00	; 0
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	96 c0       	rjmp	.+300    	; 0x1ee6 <__pack_f+0x17c>
    1dba:	62 81       	ldd	r22, Z+2	; 0x02
    1dbc:	73 81       	ldd	r23, Z+3	; 0x03
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	62 38       	cpi	r22, 0x82	; 130
    1dc2:	79 07       	cpc	r23, r25
    1dc4:	0c f0       	brlt	.+2      	; 0x1dc8 <__pack_f+0x5e>
    1dc6:	5b c0       	rjmp	.+182    	; 0x1e7e <__pack_f+0x114>
    1dc8:	22 e8       	ldi	r18, 0x82	; 130
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	26 1b       	sub	r18, r22
    1dce:	37 0b       	sbc	r19, r23
    1dd0:	2a 31       	cpi	r18, 0x1A	; 26
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	2c f0       	brlt	.+10     	; 0x1de0 <__pack_f+0x76>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	2a c0       	rjmp	.+84     	; 0x1e34 <__pack_f+0xca>
    1de0:	b8 01       	movw	r22, r16
    1de2:	a7 01       	movw	r20, r14
    1de4:	02 2e       	mov	r0, r18
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <__pack_f+0x86>
    1de8:	76 95       	lsr	r23
    1dea:	67 95       	ror	r22
    1dec:	57 95       	ror	r21
    1dee:	47 95       	ror	r20
    1df0:	0a 94       	dec	r0
    1df2:	d2 f7       	brpl	.-12     	; 0x1de8 <__pack_f+0x7e>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <__pack_f+0x9c>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	aa 1f       	adc	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	2a 95       	dec	r18
    1e08:	d2 f7       	brpl	.-12     	; 0x1dfe <__pack_f+0x94>
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	a1 09       	sbc	r26, r1
    1e0e:	b1 09       	sbc	r27, r1
    1e10:	8e 21       	and	r24, r14
    1e12:	9f 21       	and	r25, r15
    1e14:	a0 23       	and	r26, r16
    1e16:	b1 23       	and	r27, r17
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	a1 05       	cpc	r26, r1
    1e1c:	b1 05       	cpc	r27, r1
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <__pack_f+0xbe>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e0       	ldi	r26, 0x00	; 0
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	9a 01       	movw	r18, r20
    1e2a:	ab 01       	movw	r20, r22
    1e2c:	28 2b       	or	r18, r24
    1e2e:	39 2b       	or	r19, r25
    1e30:	4a 2b       	or	r20, r26
    1e32:	5b 2b       	or	r21, r27
    1e34:	da 01       	movw	r26, r20
    1e36:	c9 01       	movw	r24, r18
    1e38:	8f 77       	andi	r24, 0x7F	; 127
    1e3a:	90 70       	andi	r25, 0x00	; 0
    1e3c:	a0 70       	andi	r26, 0x00	; 0
    1e3e:	b0 70       	andi	r27, 0x00	; 0
    1e40:	80 34       	cpi	r24, 0x40	; 64
    1e42:	91 05       	cpc	r25, r1
    1e44:	a1 05       	cpc	r26, r1
    1e46:	b1 05       	cpc	r27, r1
    1e48:	39 f4       	brne	.+14     	; 0x1e58 <__pack_f+0xee>
    1e4a:	27 ff       	sbrs	r18, 7
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <__pack_f+0xf6>
    1e4e:	20 5c       	subi	r18, 0xC0	; 192
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	4f 4f       	sbci	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <__pack_f+0xf6>
    1e58:	21 5c       	subi	r18, 0xC1	; 193
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	e0 e0       	ldi	r30, 0x00	; 0
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	20 30       	cpi	r18, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	3a 07       	cpc	r19, r26
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	4a 07       	cpc	r20, r26
    1e6e:	a0 e4       	ldi	r26, 0x40	; 64
    1e70:	5a 07       	cpc	r21, r26
    1e72:	10 f0       	brcs	.+4      	; 0x1e78 <__pack_f+0x10e>
    1e74:	e1 e0       	ldi	r30, 0x01	; 1
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	79 01       	movw	r14, r18
    1e7a:	8a 01       	movw	r16, r20
    1e7c:	27 c0       	rjmp	.+78     	; 0x1ecc <__pack_f+0x162>
    1e7e:	60 38       	cpi	r22, 0x80	; 128
    1e80:	71 05       	cpc	r23, r1
    1e82:	64 f5       	brge	.+88     	; 0x1edc <__pack_f+0x172>
    1e84:	fb 01       	movw	r30, r22
    1e86:	e1 58       	subi	r30, 0x81	; 129
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	8f 77       	andi	r24, 0x7F	; 127
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	a0 70       	andi	r26, 0x00	; 0
    1e94:	b0 70       	andi	r27, 0x00	; 0
    1e96:	80 34       	cpi	r24, 0x40	; 64
    1e98:	91 05       	cpc	r25, r1
    1e9a:	a1 05       	cpc	r26, r1
    1e9c:	b1 05       	cpc	r27, r1
    1e9e:	39 f4       	brne	.+14     	; 0x1eae <__pack_f+0x144>
    1ea0:	e7 fe       	sbrs	r14, 7
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <__pack_f+0x154>
    1ea4:	80 e4       	ldi	r24, 0x40	; 64
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <__pack_f+0x14c>
    1eae:	8f e3       	ldi	r24, 0x3F	; 63
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e0       	ldi	r26, 0x00	; 0
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e8 0e       	add	r14, r24
    1eb8:	f9 1e       	adc	r15, r25
    1eba:	0a 1f       	adc	r16, r26
    1ebc:	1b 1f       	adc	r17, r27
    1ebe:	17 ff       	sbrs	r17, 7
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <__pack_f+0x162>
    1ec2:	16 95       	lsr	r17
    1ec4:	07 95       	ror	r16
    1ec6:	f7 94       	ror	r15
    1ec8:	e7 94       	ror	r14
    1eca:	31 96       	adiw	r30, 0x01	; 1
    1ecc:	87 e0       	ldi	r24, 0x07	; 7
    1ece:	16 95       	lsr	r17
    1ed0:	07 95       	ror	r16
    1ed2:	f7 94       	ror	r15
    1ed4:	e7 94       	ror	r14
    1ed6:	8a 95       	dec	r24
    1ed8:	d1 f7       	brne	.-12     	; 0x1ece <__pack_f+0x164>
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <__pack_f+0x17c>
    1edc:	ee 24       	eor	r14, r14
    1ede:	ff 24       	eor	r15, r15
    1ee0:	87 01       	movw	r16, r14
    1ee2:	ef ef       	ldi	r30, 0xFF	; 255
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	6e 2f       	mov	r22, r30
    1ee8:	67 95       	ror	r22
    1eea:	66 27       	eor	r22, r22
    1eec:	67 95       	ror	r22
    1eee:	90 2f       	mov	r25, r16
    1ef0:	9f 77       	andi	r25, 0x7F	; 127
    1ef2:	d7 94       	ror	r13
    1ef4:	dd 24       	eor	r13, r13
    1ef6:	d7 94       	ror	r13
    1ef8:	8e 2f       	mov	r24, r30
    1efa:	86 95       	lsr	r24
    1efc:	49 2f       	mov	r20, r25
    1efe:	46 2b       	or	r20, r22
    1f00:	58 2f       	mov	r21, r24
    1f02:	5d 29       	or	r21, r13
    1f04:	b7 01       	movw	r22, r14
    1f06:	ca 01       	movw	r24, r20
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	08 95       	ret

00001f14 <__unpack_f>:
    1f14:	fc 01       	movw	r30, r24
    1f16:	db 01       	movw	r26, r22
    1f18:	40 81       	ld	r20, Z
    1f1a:	51 81       	ldd	r21, Z+1	; 0x01
    1f1c:	22 81       	ldd	r18, Z+2	; 0x02
    1f1e:	62 2f       	mov	r22, r18
    1f20:	6f 77       	andi	r22, 0x7F	; 127
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	22 1f       	adc	r18, r18
    1f26:	22 27       	eor	r18, r18
    1f28:	22 1f       	adc	r18, r18
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	89 2f       	mov	r24, r25
    1f2e:	88 0f       	add	r24, r24
    1f30:	82 2b       	or	r24, r18
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	99 1f       	adc	r25, r25
    1f38:	99 27       	eor	r25, r25
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	11 96       	adiw	r26, 0x01	; 1
    1f3e:	9c 93       	st	X, r25
    1f40:	11 97       	sbiw	r26, 0x01	; 1
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	a9 f5       	brne	.+106    	; 0x1fb2 <__unpack_f+0x9e>
    1f48:	41 15       	cp	r20, r1
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	61 05       	cpc	r22, r1
    1f4e:	71 05       	cpc	r23, r1
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <__unpack_f+0x42>
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	37 c0       	rjmp	.+110    	; 0x1fc4 <__unpack_f+0xb0>
    1f56:	82 e8       	ldi	r24, 0x82	; 130
    1f58:	9f ef       	ldi	r25, 0xFF	; 255
    1f5a:	13 96       	adiw	r26, 0x03	; 3
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
    1f60:	12 97       	sbiw	r26, 0x02	; 2
    1f62:	9a 01       	movw	r18, r20
    1f64:	ab 01       	movw	r20, r22
    1f66:	67 e0       	ldi	r22, 0x07	; 7
    1f68:	22 0f       	add	r18, r18
    1f6a:	33 1f       	adc	r19, r19
    1f6c:	44 1f       	adc	r20, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	6a 95       	dec	r22
    1f72:	d1 f7       	brne	.-12     	; 0x1f68 <__unpack_f+0x54>
    1f74:	83 e0       	ldi	r24, 0x03	; 3
    1f76:	8c 93       	st	X, r24
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__unpack_f+0x80>
    1f7a:	22 0f       	add	r18, r18
    1f7c:	33 1f       	adc	r19, r19
    1f7e:	44 1f       	adc	r20, r20
    1f80:	55 1f       	adc	r21, r21
    1f82:	12 96       	adiw	r26, 0x02	; 2
    1f84:	8d 91       	ld	r24, X+
    1f86:	9c 91       	ld	r25, X
    1f88:	13 97       	sbiw	r26, 0x03	; 3
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	13 96       	adiw	r26, 0x03	; 3
    1f8e:	9c 93       	st	X, r25
    1f90:	8e 93       	st	-X, r24
    1f92:	12 97       	sbiw	r26, 0x02	; 2
    1f94:	20 30       	cpi	r18, 0x00	; 0
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	38 07       	cpc	r19, r24
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	48 07       	cpc	r20, r24
    1f9e:	80 e4       	ldi	r24, 0x40	; 64
    1fa0:	58 07       	cpc	r21, r24
    1fa2:	58 f3       	brcs	.-42     	; 0x1f7a <__unpack_f+0x66>
    1fa4:	14 96       	adiw	r26, 0x04	; 4
    1fa6:	2d 93       	st	X+, r18
    1fa8:	3d 93       	st	X+, r19
    1faa:	4d 93       	st	X+, r20
    1fac:	5c 93       	st	X, r21
    1fae:	17 97       	sbiw	r26, 0x07	; 7
    1fb0:	08 95       	ret
    1fb2:	2f 3f       	cpi	r18, 0xFF	; 255
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	79 f4       	brne	.+30     	; 0x1fd6 <__unpack_f+0xc2>
    1fb8:	41 15       	cp	r20, r1
    1fba:	51 05       	cpc	r21, r1
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <__unpack_f+0xb4>
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	8c 93       	st	X, r24
    1fc6:	08 95       	ret
    1fc8:	64 ff       	sbrs	r22, 4
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <__unpack_f+0xbe>
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	8c 93       	st	X, r24
    1fd0:	12 c0       	rjmp	.+36     	; 0x1ff6 <__unpack_f+0xe2>
    1fd2:	1c 92       	st	X, r1
    1fd4:	10 c0       	rjmp	.+32     	; 0x1ff6 <__unpack_f+0xe2>
    1fd6:	2f 57       	subi	r18, 0x7F	; 127
    1fd8:	30 40       	sbci	r19, 0x00	; 0
    1fda:	13 96       	adiw	r26, 0x03	; 3
    1fdc:	3c 93       	st	X, r19
    1fde:	2e 93       	st	-X, r18
    1fe0:	12 97       	sbiw	r26, 0x02	; 2
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	8c 93       	st	X, r24
    1fe6:	87 e0       	ldi	r24, 0x07	; 7
    1fe8:	44 0f       	add	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	66 1f       	adc	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	8a 95       	dec	r24
    1ff2:	d1 f7       	brne	.-12     	; 0x1fe8 <__unpack_f+0xd4>
    1ff4:	70 64       	ori	r23, 0x40	; 64
    1ff6:	14 96       	adiw	r26, 0x04	; 4
    1ff8:	4d 93       	st	X+, r20
    1ffa:	5d 93       	st	X+, r21
    1ffc:	6d 93       	st	X+, r22
    1ffe:	7c 93       	st	X, r23
    2000:	17 97       	sbiw	r26, 0x07	; 7
    2002:	08 95       	ret

00002004 <__fpcmp_parts_f>:
    2004:	1f 93       	push	r17
    2006:	dc 01       	movw	r26, r24
    2008:	fb 01       	movw	r30, r22
    200a:	9c 91       	ld	r25, X
    200c:	92 30       	cpi	r25, 0x02	; 2
    200e:	08 f4       	brcc	.+2      	; 0x2012 <__fpcmp_parts_f+0xe>
    2010:	47 c0       	rjmp	.+142    	; 0x20a0 <__fpcmp_parts_f+0x9c>
    2012:	80 81       	ld	r24, Z
    2014:	82 30       	cpi	r24, 0x02	; 2
    2016:	08 f4       	brcc	.+2      	; 0x201a <__fpcmp_parts_f+0x16>
    2018:	43 c0       	rjmp	.+134    	; 0x20a0 <__fpcmp_parts_f+0x9c>
    201a:	94 30       	cpi	r25, 0x04	; 4
    201c:	51 f4       	brne	.+20     	; 0x2032 <__fpcmp_parts_f+0x2e>
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	1c 91       	ld	r17, X
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	99 f5       	brne	.+102    	; 0x208c <__fpcmp_parts_f+0x88>
    2026:	81 81       	ldd	r24, Z+1	; 0x01
    2028:	68 2f       	mov	r22, r24
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	61 1b       	sub	r22, r17
    202e:	71 09       	sbc	r23, r1
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <__fpcmp_parts_f+0xac>
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	21 f0       	breq	.+8      	; 0x203e <__fpcmp_parts_f+0x3a>
    2036:	92 30       	cpi	r25, 0x02	; 2
    2038:	31 f4       	brne	.+12     	; 0x2046 <__fpcmp_parts_f+0x42>
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	b9 f1       	breq	.+110    	; 0x20ac <__fpcmp_parts_f+0xa8>
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	88 23       	and	r24, r24
    2042:	89 f1       	breq	.+98     	; 0x20a6 <__fpcmp_parts_f+0xa2>
    2044:	2d c0       	rjmp	.+90     	; 0x20a0 <__fpcmp_parts_f+0x9c>
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	1c 91       	ld	r17, X
    204a:	11 97       	sbiw	r26, 0x01	; 1
    204c:	82 30       	cpi	r24, 0x02	; 2
    204e:	f1 f0       	breq	.+60     	; 0x208c <__fpcmp_parts_f+0x88>
    2050:	81 81       	ldd	r24, Z+1	; 0x01
    2052:	18 17       	cp	r17, r24
    2054:	d9 f4       	brne	.+54     	; 0x208c <__fpcmp_parts_f+0x88>
    2056:	12 96       	adiw	r26, 0x02	; 2
    2058:	2d 91       	ld	r18, X+
    205a:	3c 91       	ld	r19, X
    205c:	13 97       	sbiw	r26, 0x03	; 3
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	82 17       	cp	r24, r18
    2064:	93 07       	cpc	r25, r19
    2066:	94 f0       	brlt	.+36     	; 0x208c <__fpcmp_parts_f+0x88>
    2068:	28 17       	cp	r18, r24
    206a:	39 07       	cpc	r19, r25
    206c:	bc f0       	brlt	.+46     	; 0x209c <__fpcmp_parts_f+0x98>
    206e:	14 96       	adiw	r26, 0x04	; 4
    2070:	8d 91       	ld	r24, X+
    2072:	9d 91       	ld	r25, X+
    2074:	0d 90       	ld	r0, X+
    2076:	bc 91       	ld	r27, X
    2078:	a0 2d       	mov	r26, r0
    207a:	24 81       	ldd	r18, Z+4	; 0x04
    207c:	35 81       	ldd	r19, Z+5	; 0x05
    207e:	46 81       	ldd	r20, Z+6	; 0x06
    2080:	57 81       	ldd	r21, Z+7	; 0x07
    2082:	28 17       	cp	r18, r24
    2084:	39 07       	cpc	r19, r25
    2086:	4a 07       	cpc	r20, r26
    2088:	5b 07       	cpc	r21, r27
    208a:	18 f4       	brcc	.+6      	; 0x2092 <__fpcmp_parts_f+0x8e>
    208c:	11 23       	and	r17, r17
    208e:	41 f0       	breq	.+16     	; 0x20a0 <__fpcmp_parts_f+0x9c>
    2090:	0a c0       	rjmp	.+20     	; 0x20a6 <__fpcmp_parts_f+0xa2>
    2092:	82 17       	cp	r24, r18
    2094:	93 07       	cpc	r25, r19
    2096:	a4 07       	cpc	r26, r20
    2098:	b5 07       	cpc	r27, r21
    209a:	40 f4       	brcc	.+16     	; 0x20ac <__fpcmp_parts_f+0xa8>
    209c:	11 23       	and	r17, r17
    209e:	19 f0       	breq	.+6      	; 0x20a6 <__fpcmp_parts_f+0xa2>
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <__fpcmp_parts_f+0xac>
    20a6:	6f ef       	ldi	r22, 0xFF	; 255
    20a8:	7f ef       	ldi	r23, 0xFF	; 255
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <__fpcmp_parts_f+0xac>
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	cb 01       	movw	r24, r22
    20b2:	1f 91       	pop	r17
    20b4:	08 95       	ret

000020b6 <__prologue_saves__>:
    20b6:	2f 92       	push	r2
    20b8:	3f 92       	push	r3
    20ba:	4f 92       	push	r4
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	ca 1b       	sub	r28, r26
    20e0:	db 0b       	sbc	r29, r27
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	09 94       	ijmp

000020ee <__epilogue_restores__>:
    20ee:	2a 88       	ldd	r2, Y+18	; 0x12
    20f0:	39 88       	ldd	r3, Y+17	; 0x11
    20f2:	48 88       	ldd	r4, Y+16	; 0x10
    20f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2100:	b9 84       	ldd	r11, Y+9	; 0x09
    2102:	c8 84       	ldd	r12, Y+8	; 0x08
    2104:	df 80       	ldd	r13, Y+7	; 0x07
    2106:	ee 80       	ldd	r14, Y+6	; 0x06
    2108:	fd 80       	ldd	r15, Y+5	; 0x05
    210a:	0c 81       	ldd	r16, Y+4	; 0x04
    210c:	1b 81       	ldd	r17, Y+3	; 0x03
    210e:	aa 81       	ldd	r26, Y+2	; 0x02
    2110:	b9 81       	ldd	r27, Y+1	; 0x01
    2112:	ce 0f       	add	r28, r30
    2114:	d1 1d       	adc	r29, r1
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	ed 01       	movw	r28, r26
    2122:	08 95       	ret

00002124 <_exit>:
    2124:	f8 94       	cli

00002126 <__stop_program>:
    2126:	ff cf       	rjmp	.-2      	; 0x2126 <__stop_program>
